#!/usr/bin/env perl

use strict;
use warnings;

use Cwd;
use JSON;
use File::Basename;
use File::Temp qw/ tempfile tempdir /;
use Number::Format 'format_number';


# TODO:
#   * pacbio-subreads import script
#   * groups data types to give overall yield and estimated coverage
#   * colour pass/warn/fail etc based on coverages
#   * add button to request topup (will just make the jira command for the moment)
#   * read length distribution plot (asmstats2)
#   * all-pacbio run data with stats and other useful info from subreadset.xml and sts.xml files?
#   * ebi submission status and accessions - talk to subtrack DB
#   * femto plots - is there any way to get and link these to the data?
#   * assemblies - I think this needs a small database

# https://github.com/VGP/vgp-assembly/blob/master/VGP_specimen_naming_scheme.md
my %groups = (
        a => 'amphibians',
        b => 'birds',
        c => 'non-vascular-plants',
        d => 'dicots',
        e => 'echinoderms',
        f => 'fish',
        g => 'fungi',
        h => 'platyhelminths',
        i => 'insects',
        j => 'jellyfish',
        k => 'chordates',
        l => 'monocots',
        m => 'mammals',
        n => 'nematodes',
        o => 'sponges',
        p => 'protists',
        q => 'arthropods',
        r => 'reptiles',
        s => 'sharks',
        t => 'other-animal-phyla',
        u => 'algae',
        v => 'vascular-plants',
        w => 'annelids',
        x => 'molluscs',
        y => 'bacteria',
        z => 'archaea',
    );

die("Expected TOLQCROOT environment variable to be set") unless (exists $ENV{TOLQCROOT});
my $root = qq[$ENV{TOLQCROOT}];

# We expect each input line to be a ToLQC directory or a species name
if ($ARGV[0] && -d $ARGV[0])
{
    make_report($ARGV[0]);
}
else
{
    while(my $dir = <>)
    {
        chomp $dir;
        if (-d $dir)
        {
            make_report($dir);
        }
        else
        {
            # If the input is not a directory, assume it is a species
            # name and look for the project directory with that species
            $dir =~ s/ /_/g;
            my @projects = glob(qq[$root/data/*/*/$dir]);
            foreach my $project (@projects)
            {
                make_report($project);
            }
        }
    }
}

exit;

sub make_report
{
    my ($dir) = @_;
    $dir =~ s/\/(genomic_data|transcriptomic_data|working|release).+$//;

    # make a minimal attempt to check the requested directory is indeed a ToLQC directory
    unless (-d qq[$dir/genomic_data] || -d qq[$dir/transcriptomic_data] || -d qq[$dir/working])
    {
        print "Directory [$dir] does not appear to have the structure expected by ToLQC... skipping\n";
        next;
    }

    my $species = basename($dir);
    my $group = basename( dirname($dir) );
    my $project = basename( dirname( dirname($dir) ) );
    $group = "$project/$group";
    $species =~ s/_/ /g;
    my $species_u = $species;
    $species_u  =~ s/ /_/g;
    print STDERR "Generating ToLQC report for $species: https://tolqc.cog.sanger.ac.uk/$group/$species_u/\n";

    my $spp = get_specimens($species,$group);
    my $sts = get_sts_record($species,$spp);
    my $gr;
    foreach my $rec (@$sts)
    {
        next unless (exists $$rec{public_name} && $$rec{public_name});
        $gr = $rec;
        last;
    }
    unless (scalar @$sts > 0 && $gr)
    {
        print STDERR "WARN: Golden record entry not found for $species... ";
        push @$sts, @{ fake_sts_record($species,$spp) };
        if (scalar @$sts > 0)
        {
            print STDERR "faking based on specimen names in genomic_data directory\n";
        }
        else
        {
            print STDERR "skipping\n";
            next;
        }
    }
    foreach my $rec (@$sts)
    {
        next unless (exists $$rec{public_name} && $$rec{public_name});
        $gr = $rec;
        last;
    }
    unless ($gr)
    {
        print STDERR "WARN: No STS record with public_name assigned for $species... skipping\n";
        next;
    }

    $gr->{common_name} =~ s/^NA$//;
    $gr->{common_name} =~ s/^UNKNOWN$//;

    my $data = {
        name           => $species,
        _name          => $species_u,
        common_name    => $gr->{common_name},
        taxon_id       => $gr->{taxon_id},
        family         => ucfirst(lc($gr->{family})),
        order_or_group => ucfirst(lc($gr->{order_or_group})),
        group          => $group
    };
    $$data{sts} = $sts;
    $data = generate_html($data);
    sleep(2);
}

sub get_sts_record
{
    my ($species,$specimens) = @_;
    my $sts_tsv = qq[$root/track/tol_sts.tsv];
    open(my $fh, "<$sts_tsv") || die("Could not open $sts_tsv");
    my @keys;
    my $index; my $index2;
    my %spp = map { $_ => 1 } @$specimens;
    my @sts;
    while (<$fh>)
    {
        chomp;
        s/â€™/'/g;
        my @line = split /\t/;
        unless (@keys)
        {
            @keys = @line;
            ($index) = grep { $keys[$_] eq 'scientific_name' } 0..$#keys;
            ($index2) = grep { $keys[$_] eq 'public_name' } 0..$#keys;
            next;
        }
        next unless (scalar @line >= $index && scalar @line >= $index2);
        next unless ($line[$index] && $line[$index] eq $species || exists $spp{"$line[$index2]"});
        my %hash;
        @hash{@keys} = @line;
        if (!$hash{biospecimen_id} && $hash{sample_same_as})
        {
            $hash{biospecimen_id} = $hash{sample_same_as};
        }
        push @sts, \%hash;
    }
    close($fh);
    return \@sts;
}

sub get_specimens
{
    my ($species,$project) = @_;
    my $species_u = $species;
    $species_u  =~ s/ /_/g;
    my @dirs = glob( "$root/data/$project/$species_u/*_data/*" );
    return [] unless @dirs; # no specimens found

    my @specimens;
    foreach my $dir (@dirs)
    {
        next unless -d $dir;
        push @specimens, basename($dir);
    }
    return \@specimens;
}

sub fake_sts_record
{
    my ($species,$specimens) = @_;
    return [] unless @$specimens;

    # TODO: add some memory so we don't keep calling the same API over and over
    my $species_pct = $species;
    $species_pct  =~ s/ /%20/g;
    my $spp_json = `curl -sS "https://www.ebi.ac.uk/ena/taxonomy/rest/scientific-name/$species_pct"`;
    return [] if ($spp_json eq 'No results.');
    $spp_json = `curl -sS "https://www.ebi.ac.uk/ena/taxonomy/rest/scientific-name/$species_pct" | jq -c .`;
    my $spp = decode_json($spp_json);
    my $tx = ''; my $cn = ''; my $family = ''; my $order = '';
    if (($spp && exists $spp->[0] && exists $spp->[0]->{taxId}))
    {
        my %rank;
        $tx = $spp->[0]->{taxId};
        if (exists $spp->[0]->{commonName}) { $cn = $spp->[0]->{commonName}; }
        if (exists $spp->[0]->{lineage})
        {
            my $lineage =$spp->[0]->{lineage};
            $lineage=~ s/; $//;
            my @taxonomy = split("; ", $lineage);
            foreach my $taxon (@taxonomy)
            {
                next if $taxon =~ / /;
                my $res_json = `curl -sS "https://www.ebi.ac.uk/ena/taxonomy/rest/scientific-name/$taxon" | jq -c .`;
                my $res = decode_json($res_json);
                if ($res && scalar @$res == 1) {
                    $rank{$res->[0]->{rank}} = $res->[0]->{scientificName};
                }
            }
        }
        $family = exists $rank{family} ? $rank{family} : '';
        $order = exists $rank{order} ? $rank{order} : '';
    }

    my @sts;
    foreach my $specimen (@$specimens)
    {
        push @sts, { public_name => $specimen, taxon_id => $tx, common_name => $cn, family => $family, order_or_group => $order  };
    }
    return \@sts;
}

sub get_cobionts
{
    my ($data) = @_;
    my $mashscreen_json = -d 'genomic_data' ? `find -L genomic_data -maxdepth 4 -type f -name \*.msh\.screen | xargs cat | sort -k6,6 | mashscreen2json` : 'null';
    my $marker_json = -d 'genomic_data' ? `find -L genomic_data -maxdepth 4 -name marker | marker2json -p -u -g "$$data{group}/$$data{_name}"` : 'null';
    my $readviz_json = -d 'genomic_data' ? `find -L genomic_data -maxdepth 4 -name readviz | readviz2json -p -u -g "$$data{group}/$$data{_name}"` : 'null';
    my $contigviz_json = -d 'genomic_data' ? `find -L genomic_data -maxdepth 4 -name contigviz | contigviz2json -p -u -g "$$data{group}/$$data{_name}"` : 'null';
    my $btk = $$data{tolid_prefix} ? `grep $$data{tolid_prefix} $ENV{TOLQCROOT}/track/tol_btk.fofn` : '';
    if ($btk)
    {
        $btk = qq[
              <div class="card">
                <div class="card-header" id="headingSix">
                  <h5 class="mb-0">
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseSix" aria-expanded="false" aria-controls="collapseSix">
                      BlobToolKit
                    </button>
                  </h5>
                </div>
                <div id="collapseSix" class="collapse" aria-labelledby="headingSix">
                  <div id="btk" class="card-body">
                    <p>BTK datasets:</p>
                    <div class="list-group">
        ];
        open my $fh, "grep $$data{tolid_prefix} $ENV{TOLQCROOT}/track/tol_btk.fofn |";
        while(<$fh>)
        {
            chomp;
            my ($dataset) = m/dataset\/(\S+)\/blob/;
            $btk .= qq[<a href="$_" class="list-group-item list-group-item-action">$dataset</a>\n];

        }
        close($fh);
        $btk .= qq[
                    </div>
                  </div>
                </div>
              </div>
        ];
    }

    my $cobionts_html = qq[
            <h2><a name="cobionts">Cobionts</a></h2>

            <div id="accordion">
              <div class="card">
                <div class="card-header" id="headingOne">
                  <h5 class="mb-0">
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne" aria-multiselectable="true">
                      Mash screen
                    </button>
                  </h5>
                </div>

                <div id="collapseOne" class="collapse" aria-labelledby="headingOne">
                  <div class="card-body">
                    <p>Below are results from a screen of the PacBio data using <a href="https://mash.readthedocs.io/en/latest/tutorials.html#screening-a-read-set-for-containment-of-refseq-genomes">Mash screen</a> against RefSeq assemblies. Only results with identity over 90% are displayed.</p>
                    <table id="mashscreen_table"
                        data-toggle="table"
                        data-show-toggle="true"
                        data-show-columns="true"
                        data-show-columns-toggle-all="true"
                        data-buttons-align="left"
                        data-pagination="true"
                        data-page-size=10
                        data-sort-name="identity"
                        data-row-style="mashStyle"
                        data-sort-order="desc">
                        <thead>
                            <tr>
                                <th data-field="identity" data-sortable="true">identity</th>
                                <th data-field="shared-hashes" data-sortable="true" data-visible="false">shared-hashes</th>
                                <th data-field="median-multiplicity" data-sortable="true" data-visible="false">median-multiplicity</th>
                                <th data-field="p-value" data-sortable="true" data-visible="false">p-value</th>
                                <th data-field="query" data-sortable="true" data-visible="false">query</th>
                                <th data-field="info" data-sortable="true">info</th>
                            </tr>
                        </thead>
                    </table>
                  </div>
                </div>
              </div>

              <div class="card">
                <div class="card-header" id="headingTwo">
                  <h5 class="mb-0">
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                      MarkerScan: species composition
                    </button>
                  </h5>
                </div>
                <div id="collapseTwo" class="collapse show" aria-labelledby="headingTwo">
                  <div class="card-body">
                    <p>Species composition by small subunit (SSU) presence in the assembly with <a href="https://github.com/CobiontID/MarkerScan">MarkerScan</a>.</p>

                    <table id="marker_species_table"
                        data-toggle="table"
                        data-show-toggle="true"
                        data-search="true"
                        data-search-align="left"
                        data-show-columns="true"
                        data-show-columns-toggle-all="true"
                        data-buttons-align="left"
                        data-pagination="true"
                        data-page-size=10
                        data-row-style="markerStyle"
                        data-sort-name="contig"
                        data-sort-order="asc">
                        <thead>
                            <tr>
                                <th data-field="specimen" data-sortable="true">specimen</th>
                                <th data-field="contig" data-sortable="true">contig</th>
                                <th data-field="SSUlength" data-sortable="true" data-formatter="local_formatter">SSU length</th>
                                <th data-field="Classification" data-sortable="true" data-formatter="ssu_taxonomy_formatter">attributed taxonomy by SSU</th>
                                <th data-field="Cluster" data-sortable="true" data-visible="false">cluster</th>
                            </tr>
                        </thead>
                    </table>
                  </div>
                </div>
              </div>

              <div class="card">
                <div class="card-header" id="headingFour">
                  <h5 class="mb-0">
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                      MarkerScan: cobiont assembly
                    </button>
                  </h5>
                </div>
                <div id="collapseFour" class="collapse" aria-labelledby="headingFour">
                  <div class="card-body">
                    <p><a href="https://github.com/CobiontID/MarkerScan">MarkerScan</a> cobiont assembly by read separation based on observed families (see above). These reads are both aligned to the assembly and independently re-assembled. The quality of these assemblies is assessed by their completeness according to BUSCO, their span and the number of reads they encompass. For more information <a href="https://github.com/CobiontID/MarkerScan">here</a>.</p>

                    <table id="marker_families_table"
                        data-toggle="table"
                        data-show-toggle="true"
                        data-search="true"
                        data-search-align="left"
                        data-show-columns="true"
                        data-show-columns-toggle-all="true"
                        data-buttons-align="left"
                        data-pagination="true"
                        data-page-size=10
                        data-sort-name="family"
                        data-sort-order="asc">
                        <thead>
                            <tr>
                                <th data-field="specimen" rowspan="2" data-valign="middle" data-sortable="true">specimen</th>
                                <th data-field="family" rowspan="2" data-valign="middle" data-sortable="true" data-formatter="family_taxon_formatter">family</th>
                                <th colspan="3">classified reads</th>
                                <th colspan="4">original assembly</th>
                                <th colspan="4">re-assembly</th>
                            </tr>
                            <tr>
                                <th data-field="ClassifiedReads" data-sortable="true" data-formatter="local_formatter">count</th>
                                <th data-field="ClassifiedReadsPercentage" data-sortable="true">(\%)</th>
                                <th data-field="Busco_ClassifiedReads" data-sortable="true">BUSCO</th>

                                <th data-field="Busco_Assembly" data-valign="middle" data-sortable="false">BUSCO</th>
                                <th data-field="BuscoNucmer_Assembly_Contigs"data-valign="middle" data-sortable="false" data-formatter="local_formatter">contigs</th>
                                <th data-field="BuscoNucmer_Assembly_ContigLength" data-valign="middle" data-sortable="false">contig length</th>
                                <th data-field="BuscoNucmer_Assembly_Reads" data-valign="middle" data-sortable="false" data-formatter="local_formatter">number of reads</th>

                                <th data-field="Busco_Re-Assembly" data-valign="middle" data-sortable="false">BUSCO</th>
                                <th data-field="BuscoNucmer_Re-Assembly_Contigs"data-valign="middle" data-sortable="false" data-formatter="local_formatter">contigs</th>
                                <th data-field="BuscoNucmer_Re-Assembly_ContigLength" data-valign="middle" data-sortable="false">contig length</th>
                                <th data-field="BuscoNucmer_Re-Assembly_Reads" data-valign="middle" data-sortable="false" data-formatter="local_formatter">number of reads</th>

                            </tr>
                        </thead>
                    </table>
                  </div>
                </div>
              </div>

              <div class="card">
                <div class="card-header" id="headingThree">
                  <h5 class="mb-0">
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                      Readviz classification
                    </button>
                  </h5>
                </div>
                <div id="collapseThree" class="collapse" aria-labelledby="headingThree">
                  <div class="card-body">
                    <p>Visualisation of a classification of the PacBio reads using a variation autoencoder on the k-mer counts.</p>

                    <table id="readviz_table" style="width: auto"
                        data-sort-name="specimen"
                        data-sort-order="desc">
                        <thead>
                            <tr>
                                <th data-field="specimen" data-sortable="true">specimen</th>
                                <th data-field="plot" data-align='right' data-sortable="false" data-formatter="gscope_detail_formatter">visualisation</th>
                            </tr>
                        </thead>
                    </table>

                  </div>
                </div>
              </div>

              <div class="card">
                <div class="card-header" id="headingFive">
                  <h5 class="mb-0">
                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                      Contigviz classification
                    </button>
                  </h5>
                </div>
                <div id="collapseFive" class="collapse" aria-labelledby="headingFive">
                  <div id="contigviz" class="card-body">
                    <p>Canonical tetranucleotide counts for each contig or scaffold reduced to two dimensions with UMAP to allow visualisation.</p>
                    <p>Features (colours represent quantile bins):
                    <ul>
                        <li><b>Hexamer</b>: Estimated coding density (expected to be higher in microbes than in animals).</li>
                        <li><b>FastK</b>: The median number of times each 60-mer in the sequence occures across the whole assembly (illustrates repetitiveness)</li>
                        <li><b>Unique_15mers</b>: Number of unique 15-mers per base pair (illustrates sequence diversity)</li>
                        <li><b>Is_Connected</b>: Presence of at least one Hi-C connection to another scaffold (absence of connections can indicate contamination)</li>
                        <li><b>Connections_Base</b>: Number of Hi-C connections per base pair</li>
                    </ul>
                    </p>
                  </div>
                </div>
              </div>
$btk
            </div>

            <hr/>
    ];

    return ( $mashscreen_json, $marker_json, $readviz_json, $contigviz_json, $cobionts_html );
}

sub generate_html
{
    my ($data) = @_;
    my $wd = qq[$root/data/$$data{group}/$$data{_name}];
    chdir($wd);

    my $species_img = '';
    if (-s "$$data{_name}.png")
    {
        $species_img = qq[<img src="$$data{_name}.png" />];
        system(qq[s3cmd --acl-public --quiet put $$data{_name}.png s3://tolqc/$$data{group}/$$data{_name}/$$data{_name}.png]);
    }

    my $gscope_json = -d 'genomic_data' ? `find -L genomic_data -type f -name \*_summary.txt | grep -v busco | grep -v bionano | gscope2json -p -u -g "$$data{group}/$$data{_name}"` : 'null';

    my $pacbio_json = -d 'genomic_data' ? `find -L genomic_data -type f -name \*.stats | grep pacbio | pbstats2json -p -u` : '';
    my $isoseq_json = -d 'transcriptomic_data' ? `find -L transcriptomic_data -type f -name \*.stats | grep pacbio | pbstats2json -p -u` : '';
    $pacbio_json = $pacbio_json.$isoseq_json;
    $pacbio_json =~ s/\]\[/,/;
    $pacbio_json =~ s/^\[,/[/;
    $pacbio_json =~ s/,\]$/]/;
    $pacbio_json = load_pacbio_accessions($pacbio_json) if ($pacbio_json);
    $pacbio_json  = 'null' unless ($pacbio_json);

    my $illumina_json = -d 'genomic_data' ? `find -L genomic_data -type f -name \*_F0xB00.stats | bamstats2json -p -u -g "$$data{group}/$$data{_name}"` : '';
    my $rnaseq_json = -d 'transcriptomic_data' ? `find -L transcriptomic_data -type f -name \*_F0xB00.stats | bamstats2json -p -u -g "$$data{group}/$$data{_name}"` : '';
    $illumina_json = $illumina_json.$rnaseq_json;
    $illumina_json =~ s/\]\[/,/;
    $illumina_json =~ s/^\[,/[/;
    $illumina_json =~ s/,\]$/]/;
    $illumina_json = load_illumina_accessions($illumina_json) if ($illumina_json);
    $illumina_json  = 'null' unless ($illumina_json);

    my $asm_json = -d 'working' ? `find working -type f -name \*.fa*.gz.stats -o -name out_scaffolds_final.fa.stats -o -name scaffolds_FINAL.fasta.stats | grep -v seqs | grep -v a_ctg | grep -v htig | asm2json -p -u -g "$$data{group}/$$data{_name}"` : 'null';
    my $organelles_json = -d 'working' ? `find working -mindepth 3 -maxdepth 3 -type f -name final_mitogenome.fasta | mitohifi2json -p -u -g "$$data{group}/$$data{_name}"` : 'null';
    my $oatk_json = -d 'working' ? `find working -mindepth 4 -maxdepth 4 -type f -name \*oatk\*.fasta | grep -v unassembled | oatk2json -p -u -g "$$data{group}/$$data{_name}"` : 'null';
    $organelles_json = $oatk_json unless ($oatk_json eq 'null' || $oatk_json eq '[]');
    # $organelles_json =~ s/\]\[/,/;
    # $organelles_json =~ s/^\[,/[/;
    # $organelles_json =~ s/,\]$/]/;
    # $organelles_json  = 'null' unless ($organelles_json);

    my $taxon_json = `curl -sS "https://www.ebi.ac.uk/ena/taxonomy/rest/tax-id/$$data{taxon_id}" | jq -c .`;
    chomp $taxon_json;
    my $taxon = decode_json($taxon_json);
    $$taxon{lineage} =~ s/ //g;
    my $goat_json = `curl -sS -X GET "https://goat.genomehubs.org/api/v0.0.1/record?recordId=$$data{taxon_id}&result=taxon" -H "accept: application/json" | jq -c .`;
    chomp $goat_json;
    my $goat = decode_json($goat_json);
    my $size = exists $$goat{records}->[0]{record}{attributes}{genome_size} ? format_number( int($$goat{records}->[0]{record}{attributes}{genome_size}{value} /1e6) ) : '';
    my $asm_size = exists $$goat{records}->[0]{record}{attributes}{assembly_span} ? format_number( int($$goat{records}->[0]{record}{attributes}{assembly_span}{value} /1e6) ) : '';
    my $chr_num = exists $$goat{records}->[0]{record}{attributes}{chromosome_number} ? $$goat{records}->[0]{record}{attributes}{chromosome_number}{value} : '';
    my $ploidy = exists $$goat{records}->[0]{record}{attributes}{ploidy} ? $$goat{records}->[0]{record}{attributes}{ploidy}{max} : '';
    my $goat_gs = $size ? [ $size, $$goat{records}->[0]{record}{attributes}{genome_size}{aggregation_source} ] : ['unknown','unknown'];
    my $goat_asm = $asm_size ? [ $asm_size, $$goat{records}->[0]{record}{attributes}{assembly_span}{aggregation_source} ] : ['unknown','unknown'];
    my $goat_chr = $chr_num ? [ $chr_num, $$goat{records}->[0]{record}{attributes}{chromosome_number}{aggregation_source} ] : ['unknown','unknown'];
    my $goat_ploidy = $ploidy ? [ $ploidy, $$goat{records}->[0]{record}{attributes}{ploidy}{aggregation_source} ] : ['unknown','unknown'];
    my $tolid_prefix =  '';
    if (exists $$goat{records}->[0]{record}{taxon_names})
    {
        foreach my $rec (@{$$goat{records}->[0]{record}{taxon_names}})
        {
            next unless ($$rec{class} eq 'tolid_prefix');
            $tolid_prefix = $$rec{name};
            last;
        }
    }
    $$data{tolid_prefix} = $tolid_prefix;

    my $specimens = -d 'genomic_data' ? `find genomic_data -maxdepth 1 -mindepth 1 -type d | cut -f2 -d"/" | sort -V | xargs echo | sed 's/ /,/g'` : '';
    $$data{specimens} = $specimens;
    my $sts_json = encode_json($$data{sts});

    my ($mashscreen_json, $marker_json, $readviz_json, $contigviz_json, $cobionts_html) = get_cobionts($data);

    my $genomic_data = '';
    if (-s "genomic_data/$$data{_name}.mash.png")
    {
        my $file =  "genomic_data/$$data{_name}.mash.png";
        system(qq[s3cmd --acl-public --quiet put $file s3://tolqc/$$data{group}/$$data{_name}/$file]);
        $genomic_data .= qq[<a href="genomic_data/$$data{_name}.mash.png" data-toggle="lightbox" data-gallery="genomic_data" data-footer="Mash plots show distance between sketches for each data set. Can be use to spot species swaps. Be aware though that structure in the heatmap may be due to technology differences (higher error rate reads vs low error rate reads) or large differences in coverage." data-title="$$data{name} <a href='https://mash.readthedocs.io/en/latest/'>Mash</a> plot"><img src="genomic_data/$$data{_name}.mash.png" class="figure-img img-fluid" width="200"></a>\n];
    }
    foreach my $file (glob("genomic_data/*/*/stats/*.hic.png"))
    {
        system(qq[s3cmd --acl-public --quiet put $file s3://tolqc/$$data{group}/$$data{_name}/$file]);
        my ($sample,$tech) = $file =~ m/genomic_data\/([^\/]+)\/([^\/]+)/;
        $genomic_data .= qq[<a href="$file" data-toggle="lightbox" data-title="$sample $tech Hi-C heatmap" data-gallery="genomic_data" data-footer="Hi-C heatmap of 30 longest contigs from low coverage sampling of the data generated with <a href='https://github.com/wtsi-hpag/PretextMap'>PretextMap</a> and <a href='https://github.com/wtsi-hpag/PretextSnapshot'>PretextSnapshot</a>."><img src="$file" class="figure-img img-fluid" width="200"></a>\n];
    }
    foreach my $file (glob("genomic_data/*/*/stats/*.fragment_separation.png"))
    {
        system(qq[s3cmd --acl-public --quiet put $file s3://tolqc/$$data{group}/$$data{_name}/$file]);
        my ($sample,$tech) = $file =~ m/genomic_data\/([^\/]+)\/([^\/]+)/;
        $genomic_data .= qq[<a href="$file" data-toggle="lightbox" data-title="$sample $tech Hi-C fragment separation distribution" data-gallery="genomic_data" data-footer="Hi-C fragment separation distribution from low coverage sampling of the data generated with <a href='https://github.com/wtsi-hpag/HiLine'>HiLine</a>."><img src="$file" class="figure-img img-fluid" width="200"></a>\n];
    }

    my ($fh, $filename) = tempfile();
    print $fh (qq[
<!DOCTYPE html>
<html lang="en">
    <head>
        <base href="https://tolqc.cog.sanger.ac.uk/$$data{group}/$$data{_name}/">
        <meta charset="utf-8">
        <title>Tree of Life QC: Species Report - $$data{name}</title>
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootswatch/4.5.0/cosmo/bootstrap.min.css" media="screen">
        <link rel="stylesheet" href="https://bootswatch.com/_assets/css/custom.min.css">
        <link rel="stylesheet" href="https://unpkg.com/bootstrap-table\@1.18.0/dist/bootstrap-table.min.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/5.3.0/ekko-lightbox.css">
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous">

        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
        <!-- <script src="https://unpkg.com/tableexport.jquery.plugin/tableExport.min.js"></script> -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/5.3.0/ekko-lightbox.min.js"></script>
        <script src="https://unpkg.com/bootstrap-table\@1.18.0/dist/bootstrap-table.min.js"></script>
        <script src="https://bootswatch.com/_assets/js/custom.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ekko-lightbox/5.3.0/ekko-lightbox.min.js"></script>

        <style>
            .mb-0 > button {
              display: inline-block;
              width: 100%;
              text-align: left;
              padding:0.75rem 1.25rem;
            }
            .card-header {
              padding:0;
            }
        </style>

    </head>
    <body>
        <div class="navbar navbar-expand-lg fixed-top navbar-dark bg-primary">
            <div class="container-fluid">
                <a href="/" class="navbar-brand">Tree of Life QC</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarResponsive">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link" href="#info">Info</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#specimens">Specimens</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#spectra">Spectra</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#seqdata">Sequence Data</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#cobionts">Cobionts</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#asm">Assemblies</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#organelles">Organelles</a>
                        </li>
                </div>
            </div>
        </div>


        <div class="container-fluid">
            <div class="page-header" id="banner">
                <div class="row">
                    <div class="col-lg-10 col-md-7 col-sm-6">
                        <h1><i>$$data{name}</i></h1>
                        <p class="lead">$$data{common_name}</p>
                    </div>
                    <div class="col-lg-2 col-md-5 col-sm-6">
                        $species_img
                    </div>
                </div>
            </div>

            <hr />

            <h2 id="info"><a name="info">Info</a></h2>
            <table>
                <tbody>
                    <tr>
                        <th scope="row" style="white-space:nowrap; padding-right:10px; text-align:right; vertical-align:top;">NCBI taxon id:</th>
                        <td><a href="https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=$$taxon{taxId}">$$taxon{taxId}</a></td>
                    </tr>
                    <tr>
                        <th scope="row" style="white-space:nowrap; padding-right:10px; text-align:right;">Order:</th>
                        <td>$$data{order_or_group}</td>
                    </tr>
                    <tr>
                        <th scope="row" style="white-space:nowrap; padding-right:10px; text-align:right;">Family:</th>
                        <td>$$data{family}</td>
                    </tr>
                    <tr>
                        <th scope="row" style="white-space:nowrap; padding-right:10px; text-align:right; vertical-align:top;">NCBI lineage:</th>
                        <td>$$taxon{lineage}</td>
                    </tr>
                    <tr>
                        <th scope="row" style="white-space:nowrap; padding-right:10px; text-align:right; vertical-align:top;"><a href="https://goat.genomehubs.org/records?record_id=$$taxon{taxId}&result=taxon&taxonomy=ncbi">GoaT</a> genome size (M):</th>
                        <td>$$goat_gs[0] ($$goat_gs[1])</td>
                    </tr>
                    <tr>
                        <th scope="row" style="white-space:nowrap; padding-right:10px; text-align:right; vertical-align:top;"><a href="https://goat.genomehubs.org/records?record_id=$$taxon{taxId}&result=taxon&taxonomy=ncbi">GoaT</a> asm span (M):</th>
                        <td>$$goat_asm[0] ($$goat_asm[1])</td>
                    </tr>
                    <tr>
                        <th scope="row" style="white-space:nowrap; padding-right:10px; text-align:right; vertical-align:top;"><a href="https://goat.genomehubs.org/records?record_id=$$taxon{taxId}&result=taxon&taxonomy=ncbi">GoaT</a> chr no.:</th>
                        <td>$$goat_chr[0] ($$goat_chr[1])</td>
                    </tr>
                    <tr>
                        <th scope="row" style="white-space:nowrap; padding-right:10px; text-align:right; vertical-align:top;"><a href="https://goat.genomehubs.org/records?record_id=$$taxon{taxId}&result=taxon&taxonomy=ncbi">GoaT</a> ploidy:</th>
                        <td>$$goat_ploidy[0] ($$goat_ploidy[1])</td>
                    </tr>
                    <tr>
                        <th scope="row" style="white-space:nowrap; padding-right:10px; text-align:right; vertical-align:top;"><a href="https://id.tol.sanger.ac.uk/">ToLID</a> prefix:</th>
                        <td>$$data{tolid_prefix}</td>
                    </tr>
              </tbody>
            </table>

            <hr />

            <h2 id="specimens"><a name="specimens">Specimens</a></h2>
            <p>Below is information about specimens collected for this species retrieved from the Golden Record manifest.</p>
            <div class="section" id="sts">
                <table id="sts_table"
                    data-show-columns="true"
                    data-show-columns-toggle-all="true"
                    data-buttons-align="left"
                    data-show-export="true"
                    data-export-types=["txt","xlsx","csv"]
                    data-show-button-icons="true"
                    data-pagination="true"
                    data-page-size=5
                    data-search="true"
                    data-search-align="left"
                    data-sort-order="asc"
                    data-sort-name="public_name">
                    <thead>
                        <tr>
                            <th data-field="public_name" data-sortable="true">public_name</th>
                            <th data-field="specimen_id" data-sortable="true">specimen_id</th>
                            <th data-field="gal" data-sortable="true">gal</th>
                            <th data-field="collector_affiliation" data-sortable="true" data-visible="false">collector_affiliation</th>
                            <th data-field="date_of_collection" data-sortable="true" data-visible="false">date_of_collection</th>
                            <th data-field="sex" data-sortable="true">sex</th>
                            <th data-field="organism_part" data-sortable="true">organism_part</th>
                            <th data-field="biosample_id" data-sortable="true" data-formatter="biosample_formatter">biosample</th>
                            <th data-field="biospecimen_id" data-sortable="true" data-formatter="biosample_formatter">biospecimen</th>
                            <th data-field="lifestage" data-sortable="true" data-visible="false">lifestage</th>
                            <th data-field="symbiont" data-sortable="true" data-visible="false">symbiont</th>
                            <th data-field="family" data-sortable="true" data-visible="false">family</th>
                            <th data-field="order_or_group" data-sortable="true" data-visible="false">order_or_group</th>
                            <th data-field="genus" data-sortable="true" data-visible="false">genus</th>
                            <th data-field="taxon_id" data-sortable="true" data-visible="false">taxon_id</th>
                            <th data-field="scientific_name" data-sortable="true" data-visible="false">scientific_name</th>
                            <th data-field="common_name" data-sortable="true" data-visible="false">common_name</th>
                            <th data-field="tubeid" data-sortable="true" data-visible="false">tube_id</th>
                        </tr>
                    </thead>
                </table>
            </div>

            <hr />

            <h2><a name="spectra">Spectra estimates</a></h2>
            <p>Below are estimates of genome size, repeat size, heterozygosity based on <i>k</i>-mer specta analysis with <a href="https://github.com/schatzlab/genomescope">GenomeScope</a>.</p>
            <div class="section" id="spectra">
                <div class="gscopetoolbar">
                    <button id="gscopebutton" class="btn btn-secondary">show all plots</button>
                    <button id="gscopebutton2" class="btn btn-secondary">hide all plots</button>
                </div>
                <table id="gscope_table"
                    data-search="true"
                    data-search-align="left"
                    data-toggle="table"
                    data-show-toggle="true"
                    data-show-columns="true"
                    data-buttons-align="left"
                    data-sort-order="asc"
                    data-detail-view="true"
                    data-detail-view-icon="false"
                    data-detail-view-by-click="true"
                    data-toolbar=".gscopetoolbar"
                    data-toolbar-align="right"
                    data-detail-formatter="gscope_detail_formatter">
                    <thead>
                        <tr>
                            <th data-field="type" data-sortable="true">source</th>
                            <th data-field="specimen" data-sortable="true">specimen</th>
                            <th data-field="k" data-align='right' data-sortable="true"><i>k</i>-mer</th>
                            <th data-field="kcov" data-align='right' data-sortable="true"><i>k</i>-cov</th>
                            <th data-field="max.len" data-align='right' data-sortable="true" data-formatter="local_formatter">haploid size</th>
                            <th data-field="max.rep" data-align='right' data-sortable="true" data-formatter="gs_rep_formatter">repeat (&#37;)</th>
                            <!-- <th data-field="uniq" data-align='right' data-sortable="true" data-formatter="local_formatter">unique</th> -->
                            <th data-field="max.het" data-align='right' data-sortable="true" data-formatter="dec2_formatter">heterozygosity (&#37;)</th>
                            <th data-field="max.fit" data-align='right' data-sortable="true" data-formatter="dec2_formatter">model fit (&#37;)</th>
                            <th data-field="max.err" data-align='right' data-sortable="true" data-formatter="dec2_formatter">model error (&#37;)</th>
                            <th data-field="plot" data-align='right' data-sortable="false" data-formatter="gs_image_formatter">histogram</th>
                        </tr>
                    </thead>
                </table>
            </div>

            <hr/>

            <h2><a name="seqdata">Sequence data</a></h2>
            <div class="section">
                $genomic_data
            </div>

            <hr/>

            <h3><a name="pacbio">PacBio run data</a></h3>
            <p>Below are stats for each PacBio seqeuncing run collected for this species.</p>
            <div class="section">
                <div class="pacbiotoolbar">
                    <button id="pacbiobutton" class="btn btn-secondary">show all plots</button>
                    <button id="pacbiobutton2" class="btn btn-secondary">hide all plots</button>
                </div>
                <table id="pacbio_table"
                    data-pagination="true"
                    data-page-size=20
                    data-search="true"
                    data-search-align="left"
                    data-toggle="table"
                    data-show-toggle="true"
                    data-show-columns="true"
                    data-buttons-align="left"
                    data-show-columns-toggle-all="true"
                    data-sort-name="date"
                    data-sort-order="asc"
                    data-detail-view="true"
                    data-detail-view-icon="false"
                    data-detail-view-by-click="true"
                    data-toolbar=".pacbiotoolbar"
                    data-toolbar-align="right"
                    data-detail-formatter="asm_image_formatter">
                    <thead>
                        <tr>
                            <th data-field="pipeline" data-sortable="true">pipeline</th>
                            <th data-field="model" data-sortable="true" data-visible="false">model</th>
                            <th data-field="specimen" data-sortable="true">specimen</th>
                            <th data-field="sanger_id" data-sortable="true" data-visible="false">sample</th>
                            <th data-field="date" data-sortable="true">date</th>
                            <th data-field="instrument" data-sortable="true" data-visible="false">instrument</th>
                            <th data-field="run" data-sortable="true">run id</th>
                            <th data-field="movie" data-sortable="true">movie</th>
                            <th data-field="well_label" data-sortable="true">well</th>
                            <th data-field="MovieLength" data-sortable="true" data-visible="false">movie length</th>
                            <th data-field="tag_index" data-sortable="true">tag</th>
                            <th data-field="tag_sequence" data-sortable="true" data-visible="false">tag sequence</th>
                            <th data-field="library_load_name" data-sortable="true" data-visible="false">library load name</th>
                            <th data-field="n" data-align='right' data-sortable="true" data-formatter="local_formatter" data-visible="false">reads</th>
                            <th data-field="sum" data-align='right' data-sortable="true" data-formatter="local_formatter">yield</th>
                            <th data-field="N50" data-align='right' data-sortable="true" data-formatter="local_formatter">N50</th>
                            <th data-field="dups" data-align='right' data-sortable="true" data-visible="false" data-formatter="dec2_formatter">PCR dups (&#37;)</th>
                            <th data-field="filtered" data-align='right' data-sortable="true" data-visible="false" data-formatter="dec2_formatter">filtered (&#37;)</th>
                            <th data-field="a" data-align='right' data-sortable="true" data-visible="false">A (&#37;)</th>
                            <th data-field="c" data-align='right' data-sortable="true" data-visible="false">C (&#37;)</th>
                            <th data-field="g" data-align='right' data-sortable="true" data-visible="false">G (&#37;)</th>
                            <th data-field="t" data-align='right' data-sortable="true" data-visible="false">T (&#37;)</th>
                            <th data-field="accession_number" data-sortable="true" data-formatter="biosample_formatter">sample accession</th>
                            <th data-field="run_accession" data-sortable="true" data-formatter="ena_formatter">run accession</th>
                            <th data-field="exp_accession" data-sortable="true" data-formatter="ena_formatter" data-visible="false">exp accession</th>
                            <th data-field="study_accession" data-sortable="true" data-formatter="ena_formatter" data-visible="false">study accession</th>
                            <th data-field="species_name" data-sortable="true"  data-visible="false">species</th>
                            <th data-field="barcode" data-align='right' data-sortable="true" data-formatter="bold_modal_formatter" data-cell-style="cellStyle">barcode</th>
                            <!-- CCS report, LIMA report, chemistry, run-stats(P0,P1,P2), run date, instrument, movie-time, pre-ext, seqkit, bindingkit, reagentbox, cell-lot, loading-conc, pass/fail, totalGb, unique molecular yield, polymerase n50, ... -->
                        </tr>
                    </thead>
                </table>
            </div>

            <!-- BOLD -->
            <div class="modal fade" id="bold_modal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-xl modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalCenterTitle"><a href="http://www.boldsystems.org/">BOLD</a> barcode check</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <!-- <p id="demo"></p> -->
                            <table id="bold_table" class="table mx-auto w-auto"
                                    data-sort-order="asc"
                                    data-search="true"
                                    data-search-align="left"
                                    data-pagination="true">
                                <thead>
                                    <tr>
                                        <th data-field="ID" data-sortable="true" data-formatter="bold_url_formatter">id</th>
                                        <th data-field="taxonomicidentification" data-sortable="true">taxon</th>
                                        <th data-field="similarity" data-sortable="true">similarity</th>
                                        <th data-field="sequencedescription" data-align='right' data-sortable="true">seq</th>
                                        <th data-field="specimen.collectionlocation.country" data-align='right' data-sortable="true">country</th>
                                        <th data-field="specimen.collectionlocation.coord.lat" data-align='right' data-sortable="true">latitude</th>
                                        <th data-field="specimen.collectionlocation.coord.lon" data-align='right' data-sortable="true">longitude</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <hr/>

            <h3><a name="illumina">Illumina run data</a></h3>
            <p>Illumina run stats.</p>
            <div class="section" id="illumina">
                <div class="illuminatoolbar">
                    <button id="button" class="btn btn-secondary">show all plots</button>
                    <button id="button2" class="btn btn-secondary">hide all plots</button>
                </div>
                <table id="illumina_table"
                        data-pagination="true"
                        data-page-size=20
                        data-search="true"
                        data-search-align="left"
                        data-toggle="table"
                        data-show-toggle="true"
                        data-show-columns="true"
                        data-show-columns-toggle-all="true"
                        data-buttons-align="left"
                        data-sort-order="asc"
                        data-detail-view="true"
                        data-detail-view-icon="false"
                        data-detail-view-by-click="true"
                        data-toolbar=".illuminatoolbar"
                        data-toolbar-align="right"
                        data-detail-formatter="illumina_image_formatter">
                    <thead>
                        <tr>
                            <th data-field="pipeline_id_lims" data-sortable="true">pipeline</th>
                            <th data-field="model" data-sortable="true" data-visible="false">model</th>
                            <th data-field="type" data-sortable="true" data-visible="false">source</th>
                            <th data-field="specimen" data-sortable="true">specimen</th>
                            <th data-field="date" data-sortable="true">date</th>
                            <th data-field="run" data-sortable="true" data-formatter="illumina_run_formatter">run id</th>
                            <th data-field="reads_paired" data-align='right' data-sortable="true" data-formatter="local_formatter">read pairs</th>
                            <th data-field="total_length" data-align='right' data-sortable="true" data-formatter="local_formatter">yield</th>
                            <th data-field="average_quality" data-align='right' data-sortable="true" data-formatter="local_formatter" data-visible="false">avg qual</th>
                            <th data-field="average_length" data-align='right' data-sortable="true" data-formatter="local_formatter" data-visible="false">avg length</th>

                            <th data-field="bases_mapped_cigar" data-align='right' data-sortable="true" data-formatter="bases_pct_formatter" data-visible="false">mapped bases (&#37;)</th>
                            <th data-field="bases_duplicated" data-align='right' data-sortable="true" data-formatter="bases_pct_formatter" data-visible="false">dups (&#37;)</th>
                            <th data-field="reads_MQ0" data-align='right' data-sortable="true" data-formatter="reads_pct_formatter" data-visible="false">MQ0 (&#37;)</th>
                            <th data-field="insert_size_average" data-align='right' data-sortable="true" data-formatter="local_formatter" data-visible="false">avg insert</th>

                            <th data-field="accession_number" data-sortable="true" data-formatter="biosample_formatter">sample accession</th>
                            <th data-field="run_accession" data-sortable="true" data-formatter="ena_formatter">run accession</th>
                            <th data-field="exp_accession" data-sortable="true" data-formatter="ena_formatter" data-visible="false">exp accession</th>
                            <th data-field="study_accession" data-sortable="true" data-formatter="ena_formatter" data-visible="false">study accession</th>
                            <th data-field="sanger_id" data-sortable="true" data-visible="false">sample</th>
                            <th data-field="tag_sequence" data-sortable="true" data-visible="false">tag sequence</th>
                            <th data-field="tag2_sequence" data-sortable="true" data-visible="false">tag2 sequence</th>
                            <th data-field="run_qc_status" data-sortable="true" data-cell-style="illumina_cell_status_style">run status</th>
                            <th data-field="npg_qc_status" data-sortable="true" data-visible="false">npg status</th>
                            <th data-field="species" data-sortable="true" data-visible="false">species</th>
                            <th data-field="barcode" data-align='right' data-sortable="true" data-formatter="bold_topmatch_formatter" data-cell-style="cellStyle">barcode</th>
                        </tr>
                    </thead>
                </table>
            </div>

            <hr/>

            $cobionts_html

            <h2><a name="asm">Assemblies</a></h2>
            <p>In-progress assembly QC.</p>
            <div class="section" id="asm">
                <div class="asmtoolbar">
                    <button id="asmbutton" class="btn btn-secondary">show all plots</button>
                    <button id="asmbutton2" class="btn btn-secondary">hide all plots</button>
                </div>
                <table id="asm_table"
                        data-toggle="table"
                        data-show-toggle="true"
                        data-show-columns="true"
                        data-show-columns-toggle-all="true"
                        data-buttons-align="left"
                        data-sort-order="asc"
                        data-search="true"
                        data-search-align="left"
                        data-detail-view="true"
                        data-detail-view-icon="false"
                        data-detail-view-by-click="true"
                        data-toolbar=".asmtoolbar"
                        data-toolbar-align="right"
                        data-detail-formatter="asm_image_formatter">
                    <thead>
                        <tr>
                            <th data-field="specimen" data-sortable="true">specimen</th>
                            <th data-field="asm" data-sortable="true">asm</th>
                            <th data-field="date" data-sortable="true">date</th>
                            <th data-field="contig_N50" data-sortable="true" data-formatter="local_formatter" data-align="right">contig N50</th>
                            <th data-field="contig_n" data-sortable="true" data-formatter="local_formatter" data-align="right">contigs</th>
                            <th data-field="scaffold_N50" data-sortable="true" data-formatter="local_formatter" data-align="right">scaffold N50</th>
                            <th data-field="scaffold_n" data-sortable="true" data-formatter="local_formatter" data-align="right">scaffolds</th>
                            <th data-field="length" data-sortable="true" data-formatter="length_formatter" data-align="right">length</th>
                            <th data-field="busco" data-sortable="true" data-formatter="busco_formatter">BUSCO</th>
                            <th data-field="busco" data-sortable="true" data-formatter="busco_lineage_formatter" data-visible="false">BUSCO lineage</th>
                            <th data-field="merqury" data-sortable="true" data-align="right">merqury</th>
                        </tr>
                    </thead>
                </table>
            </div>

            <hr/>

            <h2><a name="organelles">Organelles</a></h2>
            <p>In-progress organelle results from <a href="https://github.com/marcelauliano/MitoHiFi">MitoHiFi</a> or <a href="https://github.com/c-zhou/oatk">Oatk</a>.</p>
            <div class="section" id="organelles">
                <div class="organelletoolbar">
                    <button id="organellebutton" class="btn btn-secondary">show details</button>
                    <button id="organellebutton2" class="btn btn-secondary">hide details</button>
                </div>
                <table id="organelles_table"
                        data-toggle="table"
                        data-show-toggle="true"
                        data-show-columns="true"
                        data-show-columns-toggle-all="true"
                        data-buttons-align="left"
                        data-sort-order="asc"
                        data-search="true"
                        data-search-align="left"
                        data-detail-view="true"
                        data-detail-view-icon="false"
                        data-detail-view-by-click="true"
                        data-toolbar=".organelletoolbar"
                        data-toolbar-align="right"
                        data-detail-formatter="organelle_detail_formatter">
                    <thead>
                        <tr>
                            <th data-field="specimen" data-sortable="true">specimen</th>
                            <th data-field="asm" data-sortable="true">asm</th>
                            <th data-field="organelle" data-sortable="true">organelle</th>
                            <th data-field="date" data-sortable="true">date</th>
                            <th data-field="mitogenome_length" data-sortable="true" data-formatter="local_formatter" data-align="right">length</th>
                            <th data-field="mitogenome_gene_count" data-sortable="true" data-formatter="local_formatter" data-align="right">genes</th>
                            <th data-field="frameshifts_found" data-sortable="true">frameshifts</th>
                            <th data-field="is_circular" data-sortable="true">is circular</th>
                            <th data-field="seqs" data-sortable="true" data-visible="false">seqs</th>
                            <th data-field="shared" data-sortable="true" data-visible="false">shared</th>
                            <th data-field="unique" data-sortable="true" data-visible="false">unique</th>
                            <th data-field="missing" data-sortable="true" data-visible="false">missing</th>
                            <th data-field="reference_accession" data-sortable="true" data-formatter="organelle_ref_formatter" data-align="right">reference</th>
                        </tr>
                    </thead>
                </table>
            </div>

            <hr/>

            <div class="footer">
                    <a href="https://www.sanger.ac.uk/"><img style="float:right; height:50px" src="https://imputation.sanger.ac.uk/www/images/sanger_logo.png" class="img-responsive" alt="WTSI"></a>
                    <p class="copyright">Tree of Life Species Report is developed within the <a href="https://www.sanger.ac.uk/programme/tree-of-life/">Tree of Life Programme</a>
                    at the <a href="https://www.sanger.ac.uk/">Wellcome Sanger Institute</a><br />
                    Copyright &copy; 2020-2022 Genome Research Limited (reg no. 2742969) is a charity registered in England with number 1021457.<br />
                    <a href="http://www.sanger.ac.uk/legal/">Terms and conditions</a> | <a href="http://www.sanger.ac.uk/legal/cookiespolicy.html">Cookies policy</a>.
            </div>
        </div>

        <script type="text/javascript">

        \$(document).on('click', '[data-toggle="lightbox"]', function(event) {
            event.preventDefault();
            \$(this).ekkoLightbox();
        });
        function detailFormatter(index, row) {
            var html = []
            html.push('<table><tbody>')
            \$.each(row, function (key, value) {
                html.push('<tr><th scope="row" style="white-space:nowrap; padding-right:10px; text-align:right; vertical-align:top;">' + key + ':</th><td>' + value + '</td></tr>')
            })
            html.push('</tbody></table>')
            return html.join('')
        }
        function bold_url_formatter(value, row, index) {
            return '<a href="'+row.specimen.url+'">'+value+'</a>';
        }
        function cellStyle(value, row, index) {
            if (row.match && row.species_name)
            {
                var species_lims = row.species_name;
                var taxonomicidentification = row.match[0].taxonomicidentification;
                if (!species_lims.startsWith(taxonomicidentification) && !taxonomicidentification.startsWith(species_lims)) {
                    return {
                        classes: 'bg-danger'
                    }
                } else if (parseFloat(row.match[0].similarity) < 0.97) {
                    return {
                        classes: 'bg-warning'
                    }
                } else {
                    return {
                        classes: 'bg-success'
                    }
                }
            }
            return {
                classes: 'bg-warning'
            }
        }
        function mashStyle(row, index) {
            if (row.identity && parseFloat(row.identity)>0.97)
            {
                return {
                    classes: 'table-danger',
                }
            }
            if (row.identity && parseFloat(row.identity)>0.94)
            {
                return {
                    classes: 'table-warning',
                }
            }
            return {};
        }
        function bold_modal_formatter(value, row, index) {
            if (row.match && row.species_name)
            {
                var species_lims = row.species_name;
                var taxonomicidentification = row.match[0].taxonomicidentification;
                if (!species_lims.startsWith(taxonomicidentification) && !taxonomicidentification.startsWith(species_lims)) {
                    return '<button type="button" class="btn btn-danger" data-toggle="modal" data-target="#bold_modal">'+row.match[0].taxonomicidentification+' ('+parseFloat(row.match[0].similarity).toFixed(2)+')</button>';
                } else if (parseFloat(row.match[0].similarity) < 0.97) {
                    return '<button type="button" class="btn btn-warning" data-toggle="modal" data-target="#bold_modal">'+row.match[0].taxonomicidentification+' ('+parseFloat(row.match[0].similarity).toFixed(2)+')</button>';
                } else {
                    return '<button type="button" class="btn btn-success" data-toggle="modal" data-target="#bold_modal">'+row.match[0].taxonomicidentification+' ('+parseFloat(row.match[0].similarity).toFixed(2)+')</button>';
                }
            } else {
                return '';
            }
        }
        function tag_formatter(value, row) {
            return '<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#bold_modal">'+row.match[0].taxonomicidentification+'</button>';
        }
        function gs_image_formatter(value, row, index) {
            if (row["plot-plot"]) {
                return '<a href="'+row["plot-plot"][0]+'" data-toggle="lightbox" data-title="'+row.type+' '+row.specimen+' GenomeScope plot" data-toggle="lightbox" data-gallery="spectra"><img src="'+row["plot-plot"][0]+'" class="imggallery" width="75px"></a><a href="'+row["plot-plot.log"][0]+'" data-toggle="lightbox" data-title="'+row.type+' '+row.specimen+' GenomeScope log plot" data-toggle="lightbox" data-gallery="spectra"><img src="'+row["plot-plot.log"][0]+'" class="imggallery" width="75px"></a>';
            }
            else if (row["plot-1_transformed_linear_plot"]) {
                return '<a href="'+row["plot-1_transformed_linear_plot"][0]+'" data-toggle="lightbox" data-title="'+row.type+' '+row.specimen+' GenomeScope 2.0 linear plot" data-toggle="lightbox" data-gallery="spectra"><img src="'+row["plot-1_transformed_linear_plot"][0]+'" class="imggallery" width="75px"></a><a href="'+row["plot-1_transformed_log_plot"][0]+'" data-toggle="lightbox" data-title="'+row.type+' '+row.specimen+' GenomeScope 2.0 log plot" data-toggle="lightbox" data-gallery="spectra"><img src="'+row["plot-1_transformed_log_plot"][0]+'" class="imggallery" width="75px"></a>';
            }
            else {
                return "";
            }
        }
        function gscope_detail_formatter(index, row) {
            var gscope_plots = '';
            var x;
            for (x in sortObject(row)) {
                if (x.match(/^plot/)) {
                    var img = row[x][0];
                    var label = row[x][1];
                    gscope_plots += '<a href="'+img+'" data-toggle="lightbox" data-title="'+label+' '+row.specimen+'" data-toggle="lightbox" data-gallery="asm'+index+'"><img src="'+img+'" height="75px"></a>';
                }
            }
            return gscope_plots;
        }
        function illumina_image_formatter(index, row) {
            var illumina_plots = '';
            var x;
            for (x in sortObject(row)) {
                if (x.match(/^plot/)) {
                    var img = encodeURIComponent(row[x]);
                    illumina_plots += '<a href="'+img+'" data-toggle="lightbox" data-title="'+row.type+' '+row.specimen+' samtools stats plots" data-toggle="lightbox" data-gallery="illumina'+index+'"><img src="'+img+'" height="75px"></a>';
                }
            }
            return illumina_plots;
        }
        function gs_rep_formatter(value, row) {
            var rep = value>0 ? 100*value/row.max.len : 0;
            return dec2_formatter(rep);
        }
        function local_formatter(value) {
            if (value) {
                return value.toLocaleString();
            }
            return ""
        }
        function bases_pct_formatter(value,row) {
            if (value) {
                var pct = value>0 ? 100*value/row.total_length : 0;
                return dec2_formatter(pct);
            }
            return ""
        }
        function reads_pct_formatter(value,row) {
            if (value) {
                var pct = value>0 ? 100*value/row.sequences : 0;
                return dec2_formatter(pct);
            }
            return ""
        }
        function length_formatter(value,row) {
            if (row.scaffold_sum) {
                return row.scaffold_sum.toLocaleString();
            }
            if (row.contig_sum) {
                return row.contig_sum.toLocaleString();
            }
            return ""
        }
        function busco_formatter(value,row) {
            if (row.busco) {
                return row.busco[0].busco;
            }
            return ""
        }
        function busco_lineage_formatter(value,row) {
            if (row.busco) {
                return row.busco[0].lineage;
            }
            return ""
        }
        function merqury_formatter(value,row) {
            ret = '';
            if (row.merqury) {
                if (row.merqury.qv)
                {
                    ret+='Q'+dec1_formatter(row.merqury.qv);
                    if (row.merqury.completeness) {
                        ret+='-C'+dec1_formatter(row.merqury.completeness);
                    }
                    if (ret && row.merqury.type) {
                        ret+='('+row.merqury.type+')';
                    }
                }
            }
            return ret
        }
        function dec2_formatter(value) {
            return parseFloat(value).toFixed(2);
        }
        function dec1_formatter(value) {
            return parseFloat(value).toFixed(1);
        }
        function info_formatter(value) {
            return '<strong>' + value + '</strong>';
        }
        function illumina_run_formatter(value) {
            var run = value.match(/^[0-9]+/);
            return '<a href="http://sfweb.internal.sanger.ac.uk:9000/perl/npg/run/'+run+'">'+value+'</a>';
        }
        function biosample_formatter(value) {
            if (value) {
                return '<a href="https://www.ebi.ac.uk/biosamples/samples/'+value+'">'+value+'</a>';
            }
            return ""
        }
        function organelle_ref_formatter(value, row) {
            if (value) {
                return '<a href="https://www.ncbi.nlm.nih.gov/nuccore/'+value+'">'+value+'</a>; '+local_formatter(row.reference_length)+' bp; '+row.reference_gene_count+' genes';
            }
            return ""
        }
        function organelle_detail_formatter(index, row) {
            var organelledetail = '<pre>'+row.txt+'</pre>';

            var x;
            for (x in sortObject(row)) {
                if (x.match(/^plot/)) {
                    var img = row[x][0];
                    var label = row[x][1];
                    organelledetail += '<a href="'+img+'" data-toggle="lightbox" data-title="'+label+' '+row.specimen+'" data-toggle="lightbox" data-gallery="asm'+index+'"><img src="'+img+'" height="75px"></a>';
                }
            }

            return organelledetail
        }
        function gscope_detail_formatter(index, row) {
            var gscope_plots = '';
            var x;
            for (x in sortObject(row)) {
                if (x.match(/^plot/)) {
                    var img = row[x][0];
                    var label = row[x][1];
                    gscope_plots += '<a href="'+img+'" data-toggle="lightbox" data-title="'+label+' '+row.specimen+'" data-toggle="lightbox" data-gallery="asm'+index+'"><img src="'+img+'" height="75px"></a>';
                }
            }
            return gscope_plots;
        }

        function ena_formatter(value) {
            if (value) {
                if (value.match(/^[SE]R/)) {
                    return '<a href="https://www.ebi.ac.uk/ena/browser/view/'+value+'">'+value+'</a>';
                }
                if (value.match(/^PRJ/)) {
                    return '<a href="https://www.ebi.ac.uk/ena/browser/view/'+value+'">'+value+'</a>';
                }
                return value;
            }
            return "";
        }
        function bold_topmatch_formatter(value, row) {
            if (row.match && row.species_name)
            {
                var species_lims = row.species_name;
                var taxonomicidentification = row.match[0].taxonomicidentification;
                if (!species_lims.startsWith(taxonomicidentification) && !taxonomicidentification.startsWith(species_lims)) {
                    return '<i>'+row.match[0].taxonomicidentification+'</i> ('+parseFloat(row.match[0].similarity).toFixed(2)+')';
                } else if (parseFloat(row.match[0].similarity) < 0.97) {
                    return '<i>'+row.match[0].taxonomicidentification+'</i> ('+parseFloat(row.match[0].similarity).toFixed(2)+')';
                } else {
                    return '<i>'+row.match[0].taxonomicidentification+'</i> ('+parseFloat(row.match[0].similarity).toFixed(2)+')';
                }
            } else {
                return '';
            }
        }
        function ssu_taxonomy_formatter(value) {
            if (value) {
                return '<ul style="margin: 0px"><li><b>ENA:</b> '+value.embl_ebi_ena+'</li><li><b>SILVA:</b> '+value.slv+'</li></ul>';
            }
            return ""
        }
        function family_taxon_formatter(value) {
            if (value) {
                return '<a href="https://www.ebi.ac.uk/ena/taxonomy/rest/scientific-name/'+value+'">'+value+'</a>';
            }
            return "";
        }

        var taxon = $taxon_json;
        \$('#taxon_table').bootstrapTable({data: [ taxon ]});

        var sts = $sts_json;
        \$('#sts_table').bootstrapTable({data: sts});

        if ($gscope_json) {
            var gscope = $gscope_json;
            \$('#gscope_table').bootstrapTable({data: gscope});
        }
        // document.getElementById("demo").innerHTML = '<div class="ibox float-e-margins"><table class="table table-striped noborder"><tbody><tr><td>Species</td><td>'+match2.species.taxonrep+' ('+match2.species.stats.publicmarkersequences["COI-5P"]+' COI-5P records)</td></tr><tr><td>Genus</td><td>'+match2.genus.taxonrep+' ('+match2.genus.stats.publicmarkersequences["COI-5P"]+' COI-5P records)</td></tr><tr><td>Read</td><td>'+match2.check.readname+':'+match2.check.from+'-'+match2.check.to+match2.check.strand+'</td></tr><tr><td colspan="2" valign="top"><div style="overflow-x:auto;white-space:pre-wrap;white-space: -moz-pre-wrap;white-space: -pre-wrap;white-space: -o-pre-wrap;word-wrap:break-word;">'+match2.check.nucleotides+'</div></td></tr></tbody></table></div>';

        if ($illumina_json) {
            var illumina = $illumina_json;
            \$('#illumina_table').bootstrapTable({data: illumina});
        }
        var \$button = \$('#button')
        var \$button2 = \$('#button2')

        \$(function() {
            \$button.click(function () {
                \$('#illumina_table').bootstrapTable('expandAllRows')
            })
            \$button2.click(function () {
                \$('#illumina_table').bootstrapTable('collapseAllRows')
            })
        })
        if ($pacbio_json) {
            var pacbio = $pacbio_json;
            \$('#pacbio_table').bootstrapTable({data: pacbio});
        }
        if ($mashscreen_json) {
            var mashscreen = $mashscreen_json;
            \$('#mashscreen_table').bootstrapTable({data: mashscreen});
        }

        if ($readviz_json) {
            var readviz = $readviz_json;
            \$('#readviz_table').bootstrapTable({data: readviz});
        }

        if ($contigviz_json) {
            var contigviz = $contigviz_json;
            var target = document.getElementById("contigviz");
            var embed = '<ul>';
            for (var i = 0; i < contigviz.length; i++)  {
                embed += '<li><h6>'+contigviz[i].asm+'</h6><div class="embed-responsive embed-responsive-21by9">';
                embed += '    <iframe class="embed-responsive-item" src="'+contigviz[i].input+'" allowfullscreen></iframe>';
                embed += '</div></li>';
            }
            embed += '</ul>';
            target.innerHTML += embed;
        }

        if ($marker_json) {
            var marker = $marker_json;
            \$('#marker_species_table').bootstrapTable({data: marker.species});
            \$('#marker_families_table').bootstrapTable({data: marker.families});
        }
        if ($organelles_json) {
            var organelles = $organelles_json;
            \$('#organelles_table').bootstrapTable({data: organelles});
        }
        function markerStyle(row, index) {
            if (row.Classification)
            {
                if (row.Classification.embl_ebi_ena.match(/Chloroplast;/) || row.Classification.slv.match(/Chloroplast;/)) {
                    return {
                        classes: 'table-success',
                    }
                }
                if (row.Classification.embl_ebi_ena.match(/Mitochondria/) || row.Classification.slv.match(/Mitochondria/)) {
                    return {
                        classes: 'table-primary',
                    }
                }
                if (row.Classification.embl_ebi_ena.match(/Bacteria/) && row.Classification.slv.match(/Bacteria/)) {
                    return {
                        classes: 'table-warning',
                    }
                }
                if (row.Classification.embl_ebi_ena.match(/Unclassified/) && row.Classification.slv.match(/Unclassified/)) {
                    return {
                        classes: 'table-info',
                    }
                }
                var lineage = '$$taxon{lineage}';
                var class_array = row.Classification.embl_ebi_ena.split(';');
                var classification = class_array[class_array.length - 2];
                if (!lineage.includes(classification)) {
                    return {
                        classes: 'table-danger',
                    }
                }
            }
            return {};
        }
        if (pacbio && pacbio[0].match) {
            \$('#bold_table').bootstrapTable({data: pacbio[0].match});
        }
        function illumina_cell_status_style(value, row, index) {
            if (row.npg_qc_status)
            {
                if (row.npg_qc_status==0) {
                    return {
                        classes: 'bg-danger'
                    }
                }
                return {
                    classes: 'bg-success'
                }
            }
            return {
                classes: 'bg-success'
            }
        }
        if ($asm_json) {
            var asm = $asm_json;
            \$('#asm_table').bootstrapTable({data: asm});
        }

        function sortObject(obj) {
            return Object.keys(obj).sort().reduce(function (result, key) {
                result[key] = obj[key];
                return result;
            }, {});
        }

        function asm_image_formatter(index, row) {
            var asm_plots = '';
            var x;
            for (x in sortObject(row)) {
                if (x.match(/^plot/)) {
                    var img = row[x][0];
                    var label = row[x][1];
                    asm_plots += '<a href="'+img+'" data-toggle="lightbox" data-title="'+label+' '+row.specimen+'" data-toggle="lightbox" data-gallery="asm'+index+'"><img src="'+img+'" height="75px"></a>';
                }
            }
            return asm_plots;
        }

        var \$gscopebutton = \$('#gscopebutton')
        var \$gscopebutton2 = \$('#gscopebutton2')

        \$(function() {
            \$gscopebutton.click(function () {
                \$('#gscope_table').bootstrapTable('expandAllRows')
            })
            \$gscopebutton2.click(function () {
                \$('#gscope_table').bootstrapTable('collapseAllRows')
            })
        })

        var \$pacbiobutton = \$('#pacbiobutton')
        var \$pacbiobutton2 = \$('#pacbiobutton2')

        \$(function() {
            \$pacbiobutton.click(function () {
                \$('#pacbio_table').bootstrapTable('expandAllRows')
            })
            \$pacbiobutton2.click(function () {
                \$('#pacbio_table').bootstrapTable('collapseAllRows')
            })
        })

        var \$asmbutton = \$('#asmbutton')
        var \$asmbutton2 = \$('#asmbutton2')

        \$(function() {
            \$asmbutton.click(function () {
                \$('#asm_table').bootstrapTable('expandAllRows')
            })
            \$asmbutton2.click(function () {
                \$('#asm_table').bootstrapTable('collapseAllRows')
            })
        })

        var \$organellebutton = \$('#organellebutton')
        var \$organellebutton2 = \$('#organellebutton2')

        \$(function() {
            \$organellebutton.click(function () {
                \$('#organelles_table').bootstrapTable('expandAllRows')
            })
            \$organellebutton2.click(function () {
                \$('#organelles_table').bootstrapTable('collapseAllRows')
            })
        })

        </script>
    </body>
</html>
    ]);
    close($fh);
    system(qq[s3cmd --quiet put --acl-public $filename s3://tolqc/$$data{group}/$$data{_name}/index.html]);
    return $data;
}

sub load_illumina_accessions
{
    my ($illumina_json) = @_;
    my $accessions;
    my $prefix = qq[$ENV{TOLQCROOT}/track/tol_subtrack];
    open(my $fh, "cat ${prefix}.fofn ${prefix}_pending.fofn |") || die("Could not open file $prefix");
    while(<$fh>)
    {
        chomp;
        my ($file,$run,$exp,$study,$sample,$date) = split /\t/;
        $file = basename($file);
        $file =~ s/\.(cr|b)am$//;
        $$accessions{$file} = { run => $run, exp => $exp, study => $study, sample => $sample, date => $date };
    }
    close $fh;

    my $illumina = decode_json($illumina_json);
    my $illumina_update;
    foreach my $rec (@$illumina)
    {
        if (exists $$accessions{$$rec{run}})
        {
            $$rec{run_accession} = $$accessions{$$rec{run}}->{run};
            $$rec{exp_accession} = $$accessions{$$rec{run}}->{exp};
            $$rec{study_accession} = $$accessions{$$rec{run}}->{study};
            $$rec{accession_number} = $$accessions{$$rec{run}}->{sample};
            $$rec{submission_date} = $$accessions{$$rec{run}}->{date};
        }
        push @{$illumina_update}, $rec;
    }
    return encode_json($illumina_update);
}


sub load_pacbio_accessions
{
    my ($pacbio_json) = @_;
    my $accessions;
    my $prefix = qq[$ENV{TOLQCROOT}/track/tol_subtrack];
    open(my $fh, "cat ${prefix}.fofn ${prefix}_pending.fofn |") || die("Could not open file $prefix");
    while(<$fh>)
    {
        chomp;
        my ($file,$run,$exp,$study,$sample,$date) = split /\t/;
        $file = basename($file);
        $file =~ s/\.(cr|b)am$//;
        $file =~ s/\.reads$/.ccs/;
        $$accessions{$file} = { run => $run, exp => $exp, study => $study, sample => $sample, date => $date };
    }
    close $fh;

    my $pacbio = decode_json($pacbio_json);
    my $pacbio_update;
    foreach my $rec (@$pacbio)
    {
        my $file = basename($$rec{input});
        $file =~ s/\.stats$//;
        $file =~ s/\.rmdup//;
        if (exists $$accessions{$file})
        {
            $$rec{run_accession} = $$accessions{$file}->{run};
            $$rec{exp_accession} = $$accessions{$file}->{exp};
            $$rec{study_accession} = $$accessions{$file}->{study};
            $$rec{accession_number} = $$accessions{$file}->{sample};
            $$rec{submission_date} = $$accessions{$file}->{date};
        }
        push @{$pacbio_update}, $rec;
    }
    return encode_json($pacbio_update);
}
