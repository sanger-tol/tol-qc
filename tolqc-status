#!/usr/bin/env perl
#
#    Copyright (C) 2021 Genome Research Ltd.
#
#    Author: Shane McCarthy <sm15@sanger.ac.uk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use strict;
use warnings;
use Carp;
use Getopt::Long;
use JSON;
use DBI;
use Number::Format 'format_number';
use File::Basename;

my $opts = parse_params();
if ($$opts{input} eq '-')
{
    while(my $specimen = <>)
    {
        chomp $specimen;
        status($opts,$specimen);
    }
}
else
{
    status($opts,$$opts{input});
}

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "About: Get summary stats for a Tree of Life specimen\n",
        "Usage: tolqc-status [OPTIONS] <tolid>\n",
        "Options:\n",
        "   -t, --tech STR          select technology (required, see below)\n",
        "   -k, --kmer INT          kmer to use for Genomescope estimate [31]\n",
        "   -j, --jira              output text to request topup via jira\n",
        "   -h, --help              this help message.\n",
        "\n",
        "Valid values for (--tech):\n",
        "    * pacbio        * ont             * 10x\n",
        "    * hic-arima     * hic-dovetail    * hic-qiagen\n",
        "    * htag          * asm             \n",
        "\n";
}


sub parse_params
{
    my $opts = { input => '-', kmer => 31, jira => 0, project => '*', group => '*', label => '' };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-t' || $arg eq '--tech' ) { $$opts{tech} = shift(@ARGV); next; }
        if ( $arg eq '-c' || $arg eq '--comment' ) { $$opts{comment} = shift(@ARGV); next; }
        if ( $arg eq '-k' || $arg eq '--kmer' ) { $$opts{kmer} = shift(@ARGV); next; }
        if ( $arg eq '-l' || $arg eq '--label' ) { $$opts{label} = shift(@ARGV); next; }
        if ( $arg eq '-p' || $arg eq '--project' ) { $$opts{project} = shift(@ARGV); next; }
        if ( $arg eq '-g' || $arg eq '--group' ) { $$opts{group} = shift(@ARGV); next; }
        if ( $arg eq '-j' || $arg eq '--jira' ) { $$opts{jira} = 1; next; }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        if (scalar @ARGV == 0) { $$opts{input} = $arg; next; }
        error("Unknown parameter \"$arg\". Run -h for help.\n");
    }
    error() if ($$opts{input} eq '-' && -t STDIN);
    return $opts;
}

sub status
{
    my ($opts,$specimen) = @_;
    my $techs = $$opts{tech};
    my $label = $$opts{label};
    foreach my $tech (split /,/, $$opts{tech})
    {
        if ($tech eq 'asm')
        {
            my $asm;
            my $asmdir;
            my @asms = sort glob(qq[$ENV{TOLQCROOT}/data/*/*/*/working/$specimen.hifiasm.*/purging/purged.fa.gz]);
            if (@asms)
            {
                $asm = $asms[-1];
                $asmdir = dirname(dirname($asm));
            }
            else
            {

                @asms = sort glob(qq[$ENV{TOLQCROOT}/data/*/*/*/working/$specimen.hifiasm.*/$specimen.p_ctg.fa.gz]);
                if (@asms)
                {
                    $asm = $asms[-1];
                    $asmdir = dirname($asm);
                }
                else
                {
                    print STDERR qq[No assemblies found for specimen $specimen... skipping\n];
                    return;
                }
            }
            if (-s "$asmdir/scaffolding$label/yahs/out.break.yahs/out_scaffolds_final.fa.stats")
            {
                # print STDERR qq[Detected YaHs scaffolds\n];
                $asm = "$asmdir/scaffolding$label/yahs/out.break.yahs/out_scaffolds_final.fa";
            }
            elsif (-s "$asmdir/scaffolding$label/yahs/out.break.yahs/out_scaffolds_final.fa.gz.stats")
            {
                # print STDERR qq[Detected YaHs scaffolds\n];
                $asm = "$asmdir/scaffolding$label/yahs/out.break.yahs/out_scaffolds_final.fa.gz";
            }
            else
            {
                # print STDERR qq[Did not detect YaHs scaffolds [$asmdir/scaffolding/yahs/out.break.yahs/out_scaffolds_final.fa.stats]\n];
            }
            # print STDERR "$asm\n";
            my $asm_json = `echo $asm.stats | asm2json -p`;
            my $stats = decode_json($asm_json);
            $stats = $stats->[0];
            my $busco = exists $$stats{busco} ? $$stats{busco}[0]{busco} : '';
            my $merqury = exists $$stats{merqury} ? $$stats{merqury} : '';
            my $qv = '';
            my $completeness = '';
            if ($merqury)
            {
                ($qv,$completeness) = $merqury =~ m/^Q([\d\.]+)-C([\d\.]+)/;
            }
            my $log = "$asmdir/$specimen.log";
            my $version = '';
            if (-s $log)
            {
                my $version_line = `grep "Version:" $log`; chomp $version_line;
                ($version) = $version_line =~ m/M::main] Version: (\S+)$/;
                $version = "hifiasm-$version+purge" if $version;
                $version .= '+polish' if ($version && -s "$asmdir/polishing");
                $version .= '+yahs' if ($version && $asm =~ /out.break.yahs/);
                $version .= '+salsa' if ($version && $asm =~ /out.break.salsa/);
            }
            if (exists $$stats{N50} || ($$stats{scaffold_N50} && exists $$stats{contig_N50}))
            {
                print join("\t", $specimen, $$stats{contig_N50} / 1e6, $$stats{contig_n}, $$stats{scaffold_N50} / 1e6, $$stats{scaffold_n}, $$stats{scaffold_largest} / 1e6, $$stats{scaffold_sum}/1e6, $busco, $qv, $completeness, $version . "\n");
            }
            else
            {
                print join("\t", $specimen, $$stats{contig_N50} / 1e6, $$stats{contig_n}, "-", "-", $$stats{contig_largest} / 1e6 , $$stats{contig_sum} / 1e6, $busco, $qv, $completeness, $version . "\n");
            }
        }
        elsif ($tech =~ /^sts/)
        {
            my ($type) = $tech =~ m/sts:(\S+)$/;
            my $types;
            if ($type)
            {
                $types = [ $type ];
            }
            else
            {
                $types = [ 'PACBIO', 'HIC' ];
            }
            $type = 'PACBIO' unless ($type);
            unless ($specimen)
            {
                print "$specimen\t\n";
                return;
            }
            my $prefix = $specimen;
            $prefix =~ s/\d+$//;
            my $json = `curl -sX GET "https://sts.tol.sanger.ac.uk/api/v1/specimens?public_name=$prefix" -H "accept: application/json" -H "Authorization: $ENV{STSAPIKEY_PROD}" -H "Project: ALL"`; chomp $json;
            # my $json = `curl -sX GET "https://sts-staging.tol.sanger.ac.uk/api/v1/specimens?public_name=$prefix" -H "accept: application/json" -H "Authorization: $ENV{STSAPIKEY_PROD}" -H "Project: ALL"`; chomp $json;
            my $data = decode_json($json);
            my $status = {};
            my $projects = '';
            my %priority = (
                'UNKNOWN' => 1,
                'IN_PROGRESS' => 2,
                'COMPLETE' => 3
            );
            if (exists $$data{data} && exists $$data{data}{list})
            {
                foreach my $item (@{$$data{data}{list}})
                {
                    next unless (exists $$item{public_name});
                    next unless (exists $$item{sequencing_status});
                    $projects = join(',', @{$$item{project_codes}} ) if (exists $$item{project_codes});
                    foreach my $stat (@{$$item{sequencing_status}})
                    {
                        $$status{$$stat{name}}{$$item{public_name}} = $$stat{status};
                        if (exists $$status{$$stat{name}}{$prefix} && exists $$stat{status})
                        {
                            next if ($priority{$$status{$$stat{name}}{$prefix}}>$priority{$$stat{status}});
                        }
                        $$status{$$stat{name}}{$prefix} = $$stat{status} if ($$stat{status});
                    }
                }
            }
            # use Data::Dumper;
            # print STDERR Dumper($status);
            print "$specimen";
            foreach my $type (@$types)
            {
                my $id = $type eq 'HIC' ? $prefix : $specimen;
                my $st = exists $$status{$type}{$id} ? $$status{$type}{$id}  : 'UNKNOWN';
                print "\t$st";
            }
            print "\t$projects";
            print "\n";
        }
        elsif ($tech eq 'all')
        {
            my ($dir) = glob(qq[$ENV{TOLQCROOT}/data/$$opts{project}/$$opts{group}/*/genomic_data/$specimen/$tech]);
            unless ($dir)
            {
                print STDERR qq[No $tech data directory found for specimen $specimen... skipping\n];
                return;
            }
            my ($species_dir,$tech_dir) = $dir =~ m/(\S+)\/(genomic_data\S+)$/;
            chdir($species_dir);
            my $gscope_json = `find $tech_dir -type f -name \*_summary.txt | grep kmer | gscope2json -p`;
            my $gscope = decode_json($gscope_json);
            my $data;
            if ($tech eq 'pacbio')
            {
                my $pacbio_json = `find $tech_dir -type f -name \*ccs\*.stats | pbstats2json -p`;
                $data = decode_json($pacbio_json);
            }
            else
            {
                my $illumina_json = `find $tech_dir -type f -name \*F0xB00.stats | bamstats2json -p`;
                $data = decode_json($illumina_json);
            }

            my $yield = 0;
            my $reads = 0;
            my %runs;
            my %sanger_ids;
            my $last_date = '1900-01-01';
            if ($tech eq 'pacbio')
            {
                foreach my $run (@$data)
                {
                    $last_date = $$run{date} if ($$run{date} gt $last_date);
                    $yield += $$run{sum};
                    $reads += $$run{n};
                    $runs{"$$run{run}/$$run{well_label}"} = 1 if (exists $$run{run} && exists $$run{well_label});
                    $sanger_ids{$$run{sanger_id}} = 1;
                }
            }
            else
            {
                foreach my $run (@$data)
                {
                    $last_date = $$run{date} if (exists $$run{date} && $$run{date} gt $last_date);
                    $yield += $$run{total_length};
                    $reads += $$run{reads_paired};
                    my ($runid) = $$run{run} =~ m/(\d+)/;
                    $runs{$runid} = 1;
                    $sanger_ids{$$run{sanger_id}} = 1 if (exists $$run{sanger_id});
                }
            }
            my $size = 0;
            my $cov = 0;
            my $het = 0;
            my $rep = 0;
            my $fit = 0;
            my $err = 0;
            foreach my $gs (@$gscope)
            {
                next unless ($$gs{k} eq $$opts{kmer});
                $cov = $$gs{kcov}*2;
                $size = $$gs{max}{len};
                $rep = $$gs{max}{rep};
                $het = $$gs{max}{het};
                $fit = $$gs{max}{fit};
                $err = $$gs{max}{err};
            }
            if ($$opts{jira})
            {
                my @samples = sort keys %sanger_ids;
                my $taxon_id = get_taxon_id($samples[0]);
                my $goat = $taxon_id ? get_goat_size($taxon_id) : {};

                my $yield_txt = int( $yield / 1e9 );
                my $size_txt = int( $size / 1e6 );
                my $cov_txt = int( $cov );
                my $runs_txt = join ',', sort keys %runs;
                $runs_txt = $runs_txt =~ /,/ ? "runs $runs_txt" : "run $runs_txt";
                my $sanger_ids_txt = join ',', @samples;
                print qq[$specimen\t${yield_txt}G so far from $runs_txt ($sanger_ids_txt).];
                if ($cov_txt && $size_txt && $size_txt > 100)
                {
                    print qq[ Current coverage estimate: ${cov_txt}x and genome size estimate from data: ${size_txt}M.];
                }
                else
                {
                    print qq[ Not enough data for coverage and genome size estimates from data.];
                }
                if ($$goat{size})
                {
                    my $goat_cov = int( $yield / $$goat{size} );
                    $$goat{size} = format_number( int( $$goat{size} / 1e6 ) );
                    print qq[ GOAT coverage estimate: ${goat_cov}x based on yield and GOAT genome size: $$goat{size}M ($$goat{source}).];
                }
                print "\n";
            }
            else
            {
                my ($sts_size, $sts_cov) = get_sts_cov($specimen, $yield);
                my $sts_status = `tolqc-status -t sts $specimen | cut -f2,3`;
                chomp $sts_status;
                my ($sts_pacbio_status, $sts_hic_stats) = split /\s+/, $sts_status;
                if ($cov)
                {
                    if ($tech eq 'pacbio')
                    {
                        print join "\t", ($specimen, $sts_size/1e6, $size/1e6, $het, 100 * $rep / $size, $cov, $sts_cov, "", "", $last_date, "..$sts_pacbio_status", $sts_hic_stats);
                    }
                    else
                    {
                        print join "\t", ($specimen, $sts_size/1e6, $size/1e6, $het, 100 * $rep / $size, "", "", $cov, $sts_cov, $last_date, $sts_pacbio_status, $sts_hic_stats);
                    }
                    print "\n"
                }
                else
                {
                    if ($tech eq 'pacbio')
                    {
                        print join "\t", ($specimen, $sts_size/1e6, "", "", "", "-", $sts_cov, "","", $last_date, $sts_pacbio_status, $sts_hic_stats);
                    }
                    else
                    {
                        print join "\t", ($specimen, $sts_size/1e6, "", "", "", "", "", "-",$sts_cov, $last_date, $sts_pacbio_status, $sts_hic_stats);
                    }
                    print "\n"
                }
            }
        }
        elsif ($tech eq 'data')
        {
            $specimen.= '*' unless ($specimen =~ m/[0-9\*]$/);
            my (@dirs) = glob(qq[$ENV{TOLQCROOT}/data/$$opts{project}/$$opts{group}/*/genomic_data/$specimen/*]);
            unless (@dirs)
            {
                print STDERR qq[No $tech data directory found for specimen $specimen... skipping\n];
                return;
            }
            my %dtypes;
            foreach my $dir (@dirs)
            {
                my $base = basename($dir);
                $dtypes{"$base"}++;
            }
            print join "\t", ($specimen, sort keys %dtypes);
            print "\n";
        }
        else
        {
            my ($dir) = glob(qq[$ENV{TOLQCROOT}/data/$$opts{project}/$$opts{group}/*/genomic_data/$specimen/$tech]);
            unless ($dir)
            {
                print STDERR qq[No $tech data directory found for specimen $specimen... skipping\n];
                return;
            }
            my ($species_dir,$tech_dir) = $dir =~ m/(\S+)\/(genomic_data\S+)$/;
            chdir($species_dir);
            my $gscope_json = `find $tech_dir -type f -name \*_summary.txt | grep kmer | gscope2json -p`;
            my $gscope = decode_json($gscope_json);
            my $data;
            if ($tech eq 'pacbio')
            {
                my $pacbio_json = `find $tech_dir -type f -name \*ccs\*.stats | pbstats2json -p`;
                $data = decode_json($pacbio_json);
            }
            else
            {
                my $illumina_json = `find $tech_dir -type f -name \*F0xB00.stats | bamstats2json -p`;
                $data = decode_json($illumina_json);
            }
            # use Data::Dumper;
            # print STDERR Dumper($data);

            my $yield = 0;
            my $reads = 0;
            my %runs;
            my %sanger_ids;
            my $last_date = '1900-01-01';
            if ($tech eq 'pacbio')
            {
                foreach my $run (@$data)
                {
                    $last_date = $$run{date} if ($$run{date} gt $last_date);
                    $yield += $$run{sum};
                    $reads += $$run{n};
                    $runs{"$$run{run}/$$run{well_label}"} = 1 if (exists $$run{run} && exists $$run{well_label});
                    $sanger_ids{$$run{sanger_id}} = 1;
                }
            }
            else
            {
                foreach my $run (@$data)
                {
                    $last_date = $$run{date} if (exists $$run{date} && $$run{date} gt $last_date);
                    $yield += $$run{total_length};
                    $reads += $$run{reads_paired};
                    my ($runid) = $$run{run} =~ m/(\d+)/;
                    $runs{$runid} = 1;
                    $sanger_ids{$$run{sanger_id}} = 1 if (exists $$run{sanger_id});
                }
            }
            my $size = 0;
            my $cov = 0;
            my $het = 0;
            my $rep = 0;
            my $fit = 0;
            my $err = 0;
            foreach my $gs (@$gscope)
            {
                next unless ($$gs{k} eq $$opts{kmer});
                $cov = $$gs{kcov}*2;
                $size = $$gs{max}{len};
                $rep = $$gs{max}{rep};
                $het = $$gs{max}{het};
                $fit = $$gs{max}{fit};
                $err = $$gs{max}{err};
            }
            if ($$opts{jira})
            {
                my @samples = sort keys %sanger_ids;
                my $taxon_id = get_taxon_id($samples[0]);
                my $goat = $taxon_id ? get_goat_size($taxon_id) : {};

                my $yield_txt = int( $yield / 1e9 );
                my $size_txt = int( $size / 1e6 );
                my $cov_txt = int( $cov );
                my $runs_txt = join ',', sort keys %runs;
                $runs_txt = $runs_txt =~ /,/ ? "runs $runs_txt" : "run $runs_txt";
                my $sanger_ids_txt = join ',', @samples;
                print qq[$specimen\t${yield_txt}G so far from $runs_txt ($sanger_ids_txt).];
                if ($cov_txt && $size_txt && $size_txt > 100)
                {
                    print qq[ Current coverage estimate: ${cov_txt}x and genome size estimate from data: ${size_txt}M.];
                }
                else
                {
                    print qq[ Not enough data for coverage and genome size estimates from data.];
                }
                if ($$goat{size})
                {
                    my $goat_cov = int( $yield / $$goat{size} );
                    $$goat{size} = format_number( int( $$goat{size} / 1e6 ) );
                    print qq[ GOAT coverage estimate: ${goat_cov}x based on yield and GOAT genome size: $$goat{size}M ($$goat{source}).];
                }
                print "\n";
            }
            else
            {
                my ($sts_size, $sts_cov) = get_sts_cov($specimen, $yield);
                my $sts_status = `tolqc-status -t sts $specimen | cut -f2,3`;
                chomp $sts_status;
                my ($sts_pacbio_status, $sts_hic_stats) = split /\s+/, $sts_status;
                if ($cov)
                {
                    if ($tech eq 'pacbio')
                    {
                        print join "\t", ($specimen, $sts_size/1e6, $size/1e6, $het, 100 * $rep / $size, $cov, $sts_cov, "", "", $last_date, $sts_pacbio_status, $sts_hic_stats);
                    }
                    else
                    {
                        print join "\t", ($specimen, $sts_size/1e6, $size/1e6, $het, 100 * $rep / $size, "", "", $cov, $sts_cov, $last_date, $sts_pacbio_status, $sts_hic_stats);
                    }
                    print "\n"
                }
                else
                {
                    if ($tech eq 'pacbio')
                    {
                        print join "\t", ($specimen, $sts_size/1e6, "", "", "", "-", $sts_cov, "","", $last_date, $sts_pacbio_status, $sts_hic_stats);
                    }
                    else
                    {
                        print join "\t", ($specimen, $sts_size/1e6, "", "", "", "", "", "-",$sts_cov, $last_date, $sts_pacbio_status, $sts_hic_stats);
                    }
                    print "\n"
                }
            }
        }
    }
}

sub get_sts_cov
{
    my ($tolid, $yield) = @_;
    my $sts_size = `grep $tolid $ENV{TOLQCROOT}/track/tol_sts.tsv | awk '{print \$NF}' | head -1`; chomp $sts_size;
    return $sts_size ? ($sts_size, qq[=$yield/$sts_size]) : ("","");
}


sub get_taxon_id
{
    my ($sanger_id) = @_;
    unless (exists $ENV{WAREHOUSE_DATABASE} && exists $ENV{WAREHOUSE_HOST} && exists $ENV{WAREHOUSE_PORT} && exists $ENV{WAREHOUSE_USER})
    {
        die("WARHOUSE environment variables must be set");
    }
    my $dbh = DBI->connect(qq[DBI:mysql:$ENV{WAREHOUSE_DATABASE};host=$ENV{WAREHOUSE_HOST};port=$ENV{WAREHOUSE_PORT}],qq[$ENV{WAREHOUSE_USER}]) or die($DBI::errstr);
    my $qh = $dbh->prepare("select taxon_id from current_samples where name = ?");
    $qh->execute($sanger_id) or die($DBI::errstr);
    my @row = ('');
    @row = $qh->fetchrow_array();
    if (@row)
    {
        @row = map { defined $_ ? $_ : '' } @row;
    }
    return $row[0];
}

sub get_goat_size
{
    my ($taxon_id) = @_;
    my $goat_json = `curl -sS -X GET "https://goat.genomehubs.org/api/v0.0.1/record?recordId=$taxon_id&result=taxon" -H "accept: application/json" | jq -c .`;
    chomp $goat_json;
    my $goat = decode_json($goat_json);
    my $size = exists $$goat{records}->[0]{record}{attributes}{genome_size} ? int($$goat{records}->[0]{record}{attributes}{genome_size}{value} ) : '';
    my $source = $size ? $$goat{records}->[0]{record}{attributes}{genome_size}{aggregation_source} : '';
    return { size => $size, source => $source};
}