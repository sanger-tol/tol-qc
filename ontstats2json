#!/usr/bin/env perl
#
#    Copyright (C) 2024 Genome Research Ltd.
#
#    Author: Shane McCarthy <sm15@sanger.ac.uk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use strict;
use warnings;
use Carp;
use JSON;
use XML::Simple;
use Cwd;
use File::Basename;

my $opts = parse_params();
my $output = [];
if ($$opts{stdin})
{
    while (<>)
    {
        chomp;
        push @$output, parse_asmstats($opts, $_);
    }
}
else
{
    foreach my $file (@{$$opts{inputs}})
    {
        push @$output, parse_asmstats($opts, $file);
    }
}
print encode_json($output);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "\nAbout: Extract ToLQC json from ONT stats files\n",
        "Usage: ontstats2json <asmstats_file>\n",
        "\n";
}

sub parse_params
{
    my $opts = { stdin => 0, upload => 0, group => '', base => "$ENV{PWD}/", minimal => 0 };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-b' || $arg eq '--base' ) { $$opts{base} = shift(@ARGV); next; }
        elsif ( $arg eq '-p' || $arg eq '--stdin' ) { $$opts{stdin} = 1; next; }
        elsif ( $arg eq '-g' || $arg eq '--group' ) { $$opts{group} = shift(@ARGV); next; }
        elsif ( $arg eq '-u' || $arg eq '--upload' ) { $$opts{upload} = 1; next; }
        elsif ( $arg eq '-m' || $arg eq '--minimal' ) { $$opts{minimal} = 1; next; }
        elsif ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        else { push @{$$opts{inputs}}, $arg; }
    }
    error() unless ($$opts{stdin}==1 || scalar @{$$opts{inputs}});
    return $opts;
}

sub parse_asmstats
{
    my ($opts,$input) = @_;
    unless ($input =~ /^\//)
    {
        $input = Cwd::abs_path($input);
        $$opts{base} = Cwd::abs_path($$opts{base});
    }

    my $group = $$opts{group};
    unless ($group)
    {
        ($group) = $input =~ m{([^\/]+/[^\/]+)/[^\/]+/genomic_data};
    }
    $group =~ s/^\///;
    $group =~ s/\/$//;
    my $base = basename($input);
    my ($flowcell,$type) = $base =~ m/([^\.]+).ont.(.+).stats$/;
    return unless ($flowcell);
    my $flowcell_info = flowcell2lims($opts, $flowcell);

    my $stats = { platform => 'ONT', flowcell => $flowcell, type => $type, a => 0+0, c => 0+0, g => 0+0, t => 0+0, ( %$flowcell_info ) };
    my ($species_dir,$specimen,$source) = $input =~ m{(^.+)/genomic_data/([^\/]+)/([^\/]+)/stats};
    my $species = basename($species_dir);
    $species =~ s/_/ /g;
    $$stats{species} = $species if ($species);
    if ($species && !(exists $$stats{species_name} && $$stats{species_name}))
    {
        my @species_split = split " ", $species;
        $$stats{species_name} = join " ", @species_split[0..1];
    }
    $$stats{source} = $source if ($source);
    $$stats{specimen} = $specimen if ($specimen);
    $$stats{group} = $group if ($group);

    my $tolqc = $ENV{TOLQCROOT};
    my ($ontdir) = $input =~ m{(^.+/ont.*)/stats};
    my @reports = glob(qq[$ontdir/reports/*$flowcell*.html]);
    foreach my $report (sort @reports)
    {
        my $report_path = $report;
        $report_path =~ s/$$opts{base}\///;
        $report_path =~ s/^\///;
        $$stats{"report"} = $report_path;
        $report_path = "$$opts{group}/$report_path" if ($$opts{group});
        if ($$opts{upload})
        {
            system(qq[s3cmd put --quiet --acl-public $report s3://tolqc/$report_path]);
        }
    }

    open(my $fh, "<$input") || die("Could not open $input");
    while (<$fh>)
    {
        chomp;
        if (/^A = \d+ \(([\d\.]+)\%\), C = \d+ \(([\d\.]+)\%\), G = \d+ \(([\d\.]+)\%\), T = \d+ \(([\d\.]+)\%\)/)
        {
            $$stats{a} = $1+0;
            $$stats{c} = $2+0;
            $$stats{g} = $3+0;
            $$stats{t} = $4+0;
        }
        elsif (/^sum = (\d+), n = (\d+), (ave|mean) = ([\d\.]+), largest = (\d+), smallest = (\d+)$/ || /^SCAFFOLD\tsum = (\d+), n = (\d+), (ave|mean) = ([\d\.]+), largest = (\d+), smallest = (\d+)$/)
        {
            $$stats{sum} = $1+0;
            $$stats{n} = $2+0;
            $$stats{mean} = $4+0;
            $$stats{largest} = $5+0;
            $$stats{smallest} = $6+0;
        }
        elsif (/^CONTIG\tsum = (\d+), n = (\d+), (ave|mean) = ([\d\.]+), largest = (\d+), smallest = (\d+)$/)
        {
            $$stats{contig_sum} = $1+0;
            $$stats{contig_n} = $2+0;
            $$stats{contig_mean} = $4+0;
            $$stats{contig_largest} = $5+0;
            $$stats{contig_smallest} = $6+0;
        }
        elsif (/^N(\d+) = (\d+), L(\d+) = (\d+)$/ || /^SCAFFOLD\tN(\d+) = (\d+), L(\d+) = (\d+)$/)
        {
            my $nx = "N$1";
            my $lx = "L$1";
            $$stats{$nx} = $2+0;
            $$stats{$lx} = $4+0;
        }
        elsif (/^CONTIG\tN(\d+) = (\d+), L(\d+) = (\d+)$/)
        {
            my $nx = "contig_N$1";
            my $lx = "contig_L$1";
            $$stats{$nx} = $2+0;
            $$stats{$lx} = $4+0;
        }
    }
    close($fh);

    return $stats;
}

sub flowcell2lims
{
    my ($opts,$flowcell) = @_;
    my $hash = {};
    my $tolqc = $ENV{TOLQCROOT};
    my $data = -s "$tolqc/track/tol_ont_data.fofn.part" ? "$tolqc/track/tol_ont_data.fofn.part" : "$tolqc/track/tol_ont_data.fofn";
    return $hash unless (`grep $flowcell $data`);
    open my $fh, "grep $flowcell $data |";
    while (<$fh>)
    {
        chomp;
        my @F = split /\t/;
        my ($dt) = $F[0] =~ m/20(\d{6})_/;
        my @a = ( $dt =~ m/../g );
        $dt = join "-", @a;
        $dt = "20$dt";
        $$hash{date} = $dt;
        $$hash{rundir} = $F[0];
        $$hash{run} = $F[10];
        $$hash{instrument} = $F[13];
        $$hash{model} = $F[8];
        $$hash{sample} = $F[4];
        $$hash{biosample} = $F[5];
        $$hash{biospecimen} = $F[6];
        $$hash{species_lims} = $F[2];
        $$hash{library_name} = $F[15];
    }
    close($fh);

    $data = -s "$tolqc/track/tol_ont_data.lims.tsv.part" ? "$tolqc/track/tol_ont_data.lims.tsv.part" : "$tolqc/track/tol_ont_data.lims.tsv";
    return $hash unless (`grep $flowcell $data`);
    open my $fh2, "grep $flowcell $data |";
    while (<$fh2>)
    {
        chomp;
        my @F = split /\t/;
        $$hash{pipeline} = $F[16];
    }
    close($fh2);


    return $hash;
}
