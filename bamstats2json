#!/usr/bin/env perl
#
#    Copyright (C) 2017-2021 Genome Research Ltd.
#
#    Author: Shane McCarthy <smn15@sanger.ac.uk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use strict;
use warnings;
use Carp;
use Getopt::Long;
use JSON;
use Cwd;
use File::Basename;


my $type = {
    'raw_total_sequences' => 'i',
    'filtered_sequences' => 'i',
    'sequences' => 'i',
    'is_sorted' => 'b',
    '1st_fragments' => 'i',
    'last_fragments' => 'i',
    'reads_mapped' => 'i',
    'reads_mapped_and_paired' => 'i',
    'reads_unmapped' => 'i',
    'reads_properly_paired' => 'i',
    'reads_paired' => 'i',
    'reads_duplicated' => 'i',
    'reads_MQ0' => 'i',
    'reads_QC_failed' => 'i',
    'non_primary_alignments' => 'i',
    'total_length' => 'i',
    'bases_mapped' => 'i',
    'bases_mapped_cigar' => 'i',
    'bases_trimmed' => 'i',
    'bases_duplicated' => 'i',
    'mismatches' => 'i',
    'error_rate' => 'f',
    'average_length' => 'i',
    'maximum_length' => 'i',
    'average_quality' => 'f',
    'insert_size_average' => 'f',
    'insert_size_standard_deviation' => 'f',
    'inward_oriented_pairs' => 'i',
    'outward_oriented_pairs' => 'i',
    'pairs_with_other_orientation' => 'i',
    'pairs_on_different_chromosomes' => 'i',
};

my $opts = parse_params();
my $output = [];
if ($$opts{stdin})
{
    while (<>)
    {
        chomp;
        push @$output, parse_bamstats($opts, $_);
    }
}
else
{
    foreach my $file (@{$$opts{inputs}})
    {
        push @$output, parse_bamstats($opts, $file);
    }
}
print encode_json($output);

exit;

#------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "\nAbout: Convert summary numbers from samtools stats files to json\n",
        "Usage: $0 [OPTIONS] <stats_file> [...]\n",
        "\n";
}

sub parse_params
{
    my $opts = { stdin => 0, upload => 0, group => '', species => '', base => "$ENV{PWD}/", regex => '([^\/]+)/([^\/]+)/stats/\S+.stats$' };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-b' || $arg eq '--base' ) { $$opts{base} = shift(@ARGV); next; }
        elsif ( $arg eq '-s' || $arg eq '--species' ) { $$opts{species} = shift(@ARGV); next; }
        elsif ( $arg eq '-p' || $arg eq '--stdin' ) { $$opts{stdin} = 1; next; }
        elsif ( $arg eq '-g' || $arg eq '--group' ) { $$opts{group} = shift(@ARGV); next; }
        elsif ( $arg eq '-u' || $arg eq '--upload' ) { $$opts{upload} = 1; next; }
        elsif ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        else { push @{$$opts{inputs}}, $arg; }
    }
    error() unless ($$opts{stdin}==1 || scalar @{$$opts{inputs}});
    return $opts;
}

sub run2lims
{
    my ($run) = @_;
    my %hash;
    # this is Sanger-specific labelling of Illumina run data:
    # RUN_LANE#PLEX or RUN_LANE
    my ($id_run,$position,undef,$tag_index) = $run =~ m/(\d+)_(\d+)-(\d+)#(\d+)/;
    $position = 'NULL' if ($id_run);
    unless ($id_run)
    {
        ($id_run,$position,$tag_index) = $run =~ m/(\d+)_(\d+)#(\d+)/;
    }
    unless ($id_run)
    {
        ($id_run,$position) = $run =~ m/(\d+)_(\d+)/;
        $tag_index = 'NULL';
    }
    unless ($id_run)
    {
        ($id_run,$tag_index) = $run =~ m/(\d+)#(\d+)/;
        $position = 'NULL';
    }
    return \%hash unless $id_run;
     #  1 file    /seq/22577/22577_5#2.cram
     #  2 tolid   aRhiBiv1
     #  3 common_name     Rhinatrema bivittatum
     #  4 pipeline        Chromium genome
     #  5 library DN486106K:D1
     #  6 sample  4642STDY6775383
     #  7 supplier_name   Rb
     #  8 biosample       SAMEA104387956
     #  9 biospecimen     4642STDY6775383
     # 10 taxon_id        194408
     # 11 description     NULL
     # 12 instrument_model        HiSeqX
     # 13 instrument_name HX8
     # 14 run_complete    2017-05-25 08:22:15
     # 15 run_id  22577
     # 16 lane    5
     # 17 tag     2
     # 18 tag_seq1        GCTGAATT
     # 19 tag_seq2        NULL
     # 20 run_status      qc complete
     # 21 run_date        2017-06-03 15:59:16
     # 22 study_id        4642
     # 23 study   Vertebrate Genome Project_CAECILIAN
     # 24 manual_qc       1
    my $track = qq[$ENV{TOLQCROOT}/track];
    my $lims = -s "$track/tol_illumina_data.fofn.part" ? "$track/tol_illumina_data.fofn.part" : "$track/tol_illumina_data.fofn";
    my $fh;
    # if ($position eq 'NULL')
    # {
    #     open $fh, qq[awk -F"\\t" 'BEGIN{OFS="\\t"}\$12=="$id_run" && \$14=="$tag_index"' $lims | sed 's/NULL//g' |];
    # }
    # elsif ($tag_index eq 'NULL')
    # {
    #     open $fh, qq[awk -F"\\t" 'BEGIN{OFS="\\t"}\$12=="$id_run" && \$13=="$position"' $lims | sed 's/NULL//g' |];
    # }
    # else
    # {
    #     open $fh, qq[awk -F"\\t" 'BEGIN{OFS="\\t"}\$12=="$id_run" && \$13=="$position" && \$14=="$tag_index"' $lims | sed 's/NULL//g' |];
    # }
    open $fh, qq[egrep "$run.(b|cr)am" $lims | sed 's/NULL//g' |];
    while (<$fh>)
    {
        chomp;
        my @F = split /\t/;
        if (scalar @F > 21)
        {
            $hash{irods_path} = dirname($F[0]);
            $hash{irods_file} = basename($F[0]);
            $hash{species_lims} = $F[2];
            $hash{pipeline_id_lims} = $F[3];
            $hash{library_id} = $F[4];
            $hash{sanger_id} = $F[5];
            $hash{supplier_name} = $F[6];
            $hash{accession_number} = $F[7];
            $hash{biospecimen_accession} = $F[8];
            $hash{taxon_id} = $F[9];
            $hash{description} = $F[10];
            $hash{model} = $F[11];
            $hash{instrument} = $F[12];
            $hash{run_complete} = substr($F[13],0,10);
            $hash{id_run} = $F[14];
            $hash{position} = $F[15];
            $hash{tag_index} = $F[16];
            $hash{tag_sequence} = $F[17];
            $hash{tag2_sequence} = $F[18];
            $hash{run_qc_status} = $F[19];
            $hash{date} = substr($F[20],0,10);
            $hash{study_id} = $F[21];
            $hash{study_name} = $F[22];
            $hash{npg_qc_status} = $F[23];
    }
    else
    {
            $hash{irods_path} = dirname($F[0]);
            $hash{irods_file} = basename($F[0]);
            $hash{species_lims} = $F[2];
            $hash{pipeline_id_lims} = $F[3];
            $hash{library_id} = $F[4];
            $hash{sanger_id} = $F[4];
            $hash{supplier_name} = $F[5];
            $hash{accession_number} = $F[6];
            $hash{biospecimen_accession} = $F[7];
            $hash{taxon_id} = $F[8];
            $hash{description} = $F[9];
            $hash{model} = $F[10];
            $hash{id_run} = $F[11];
            $hash{position} = $F[12];
            $hash{tag_index} = $F[13];
            $hash{tag_sequence} = $F[14];
            $hash{tag2_sequence} = $F[15];
            $hash{run_qc_status} = $F[16];
            $hash{date} = substr($F[17],0,10);
            $hash{run_complete} = $hash{date};
            $hash{study_id} = $F[18];
            $hash{study_name} = $F[19];
            $hash{npg_qc_status} = $F[20];
    }

     #  1 /seq/illumina/runs/44/44888/lane2/plex2/44888_2#2.cram
     #  2 icCryRufc1
     #  3 Cryptophagus ruficornis
     #  4 Hi-C - Arima v2
     #  5
     #  6 DTOL12825154
     #  7 Ox001148
     #  8 SAMEA10200782
     #  9 SAMEA10107069
     # 10 877929
     # 11 FD20709520
     # 12 NovaSeq
     # 13 
     # 14 
     # 15 44888
     # 16 2
     # 17 2
     # 18 CCTCACGT
     # 19 TAGAACTG
     # 20 qc complete
     # 21 2022-05-17 13:55:56
     # 22 5901
     # 23 DTOL_Darwin Tree of Life
     # 24 1

     #  1 /seq/illumina/runs/48/48803/lane5-6/plex4/48803_5-6#4.cram
     #  2 iyOecSmar38
     #  3 Oecophylla smaragdina
     #  4 Hi-C - Arima v2
     #  5 SQPP-52276-N:H3
     #  6 7308STDY14643763
     #  7 FD22333670_HIC
     #  8 SAN22000473
     #  9 7308STDY14643763
     # 10 84561
     # 11 Tissue material in absolute ethanol, for HiC
     # 12 NovaSeqX
     # 13 NX1
     # 14 2024-04-17 15:34:48
     # 15 48803
     # 16 NULL
     # 17 4
     # 18 GCTGTTCA
     # 19 GAGAGTAG
     # 20 qc complete
     # 21 2024-04-19 13:31:04
     # 22 7308
     # 23 Microsporidia
     # 24 1

    }
    close($fh);
    return \%hash;
}

sub parse_bamstats
{
    my ($opts,$input) = @_;

    $input = Cwd::abs_path($input) unless ($input =~ /^\//);

    my $species = $$opts{species};
    unless ($species)
    {
        ($species) = $input =~ m{/([^\/]+)/(genomic|transcriptomic|resequencing)_data};
        $species =~ s/_/ /g;
    }
    my $group = $$opts{group};
    unless ($group)
    {
        ($group) = $input =~ m{([^\/]+/[^\/]+)/[^\/]+/(genomic|transcriptomic|resequencing)_data};
    }

    my $dir = dirname($input);
    my $base = basename($input);
    $base =~ s/_F0xB00.stats$//;
    my $run_info = run2lims($base);
    my $hash = { run => $base, ( %$run_info )};
    open(my $fh, "<$input") || die("Could not open $input");
    while(<$fh>)
    {
        chomp;
        next unless /^SN/;
        my (undef, $key, $val, undef) = split /\t/;
        $key =~ s/[:\(\)]//g;
        $key =~ s/[ -]/_/g;
        next unless (exists $$type{"$key"});
        if ($$type{"$key"} eq 'i')
        {
            $$hash{"$key"} = $val+0;
        }
        elsif ($$type{"$key"} eq 'f')
        {
            $$hash{"$key"} = $val+0.0;
        }
        elsif ($$type{"$key"} eq 'b')
        {
            $$hash{"$key"} = $val==1 ? JSON::true : JSON::false;
        }
        else
        {
            print STDERR "no key $key";
        }
    }
    close $fh;
    my ($specimen,$type) = $input =~ m{$$opts{regex}};
    $$hash{type} = $type if ($type);
    $$hash{specimen} = $specimen if ($specimen);
    $$hash{group} = $group if ($group);
    $$hash{species} = $species if ($species);
    $$hash{species_name} = $species if ($species);
    $$hash{platform} = 'Illumina';

    my $bold = $input;
    $bold =~ s/_F0xB00\.stats$/.m0.cov/;
    $bold =~ s/stats/bold/;
    if (-s $bold)
    {
        my $match = bold2json($bold);
        if (exists $$match{match})
        {
            $$hash{match} = [ $$match{match}->[0] ];
        }
    }

    # 33254_3#6/33254_3#6_F0xB00-acgt-cycles.png
    # 33254_3#6/33254_3#6_F0xB00-gc-content.png
    # 33254_3#6/33254_3#6_F0xB00-quals2.png
    # 33254_3#6/33254_3#6_F0xB00-quals3.png
    # 33254_3#6/33254_3#6_F0xB00-quals-hm.png
    # 33254_3#6/33254_3#6_F0xB00-quals.png

    foreach my $label (qw(acgt-cycles gc-content quals quals-hm quals2 quals3), qw(insert-size mism-per-cycle indel-cycles indel-dist gc-depth))
    {
        my $plot = qq[$dir/$base/${base}_F0xB00-$label.png];
        next unless (-s $plot);
        my $plot_path = $plot;
        $plot_path =~ s/$$opts{base}//;
        $$hash{"plot-1_$label"} = $plot_path;
        if ($$opts{upload})
        {
            system(qq[s3cmd put --quiet $plot s3://tolqc/$$opts{group}/$plot_path && s3cmd setacl --quiet --acl-public s3://tolqc/$$opts{group}/$plot_path]);
        }
    }
    foreach my $label (qw(hic fragment_separation))
    {
        my $plot = qq[$dir/$base/${base}.$label.png];
        next unless (-s $plot);
        my $plot_path = $plot;
        $plot_path =~ s/$$opts{base}//;
        $$hash{"plot-2_$label"} = $plot_path;
        if ($$opts{upload})
        {
            system(qq[s3cmd put --quiet $plot s3://tolqc/$$opts{group}/$plot_path && s3cmd setacl --quiet --acl-public s3://tolqc/$$opts{group}/$plot_path]);
        }
    }
    return $hash;
}


sub bold2json
{
    my ($lambda) = @_;
    my $bold = {};
    open(my $fh, "<$lambda") || die("Could not read from '$lambda'");
    while(<$fh>)
    {
        my ($read,$idstring,$identity) = split /\t/;
        my ($id,$species,$marker) = split(/\|/,$idstring);
        next unless ($id && $species && $marker);
        $species =~ s/_/ /g;
        my $record = {
            'database' => 'BOLD: Public Records',
            'ID' => "$id",
            'sequencedescription' => "$marker",
            'taxonomicidentification' => "$species",
            'similarity' => $identity / 100.0,
            'specimen' => {
            'collectionlocation' => {
                    'country' => {},
                    'coord' => {
                        'lat' => {},
                        'lon' => {}
                    }
                },
                'url' => "http://www.boldsystems.org/index.php/Public_RecordView?processid=$id"
            },
            'citation' => 'BOLD Systems, 2020'
        };
        push @{$$bold{match}}, $record;
        last;
    }
    close($fh);
    return $bold;
}
