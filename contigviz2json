#!/usr/bin/env perl
#
#    Copyright (C) 2020-2021 Genome Research Ltd.
#
#    Author: Shane McCarthy <sm15@sanger.ac.uk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use strict;
use warnings;
use Carp;
use JSON;
use Cwd;
use File::Basename;

my $opts = parse_params();
my $output = [];
if ($$opts{stdin})
{
    while (<>)
    {
        chomp;
        push @$output, parse_contigviz($opts, $_);
    }
}
else
{
    foreach my $file (@{$$opts{inputs}})
    {
        push @$output, parse_contigviz($opts, $file);
    }
}
print encode_json($output);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "\nAbout: Convert ContigViz results to json\n",
        "Usage: contigviz2json <contigviz_directory>\n",
        "\n";
}

sub parse_params
{
    my $opts = { stdin => 0, base => "$ENV{PWD}/", regex => '([^\/]+)/pacbio/cobiont/contigviz', group => '', upload => 0 };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-b' || $arg eq '--base' ) { $$opts{base} = shift(@ARGV); next; }
        elsif ( $arg eq '-p' || $arg eq '--stdin' ) { $$opts{stdin} = 1; next; }
        elsif ( $arg eq '-g' || $arg eq '--group' ) { $$opts{group} = shift(@ARGV); next; }
        elsif ( $arg eq '-u' || $arg eq '--upload' ) { $$opts{upload} = 1; next; }
        elsif ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        else { push @{$$opts{inputs}}, $arg; }
    }
    error() unless ($$opts{stdin}==1 || scalar @{$$opts{inputs}});
    return $opts;
}

sub parse_contigviz
{
    my ($opts,$dir) = @_;
    my $abs_dir = Cwd::abs_path($dir);
    unless ($dir =~ /^\//)
    {
        $abs_dir = qq[$$opts{base}$dir] if $$opts{base};
    }

    my $hash;
    my ($specimen) = $dir =~ m{$$opts{regex}};

    my @htmls = glob(qq[$abs_dir/*/html/*_multi_select.html]);#`find $abs_dir -type f -iname "*.html"`; "${specimen}_multi_select.html";

    foreach my $html (@htmls)
    {
        $html =~ s/$abs_dir\///;
        my ($asmdir) = split(/\//, $html);
        if (-s "$abs_dir/$html" && exists $$opts{base})
        {
            if ($$opts{upload})
            {
                system(qq[s3cmd put --acl-public --quiet "$abs_dir/$html" s3://tolqc/$$opts{group}/$dir/$html]) if ($$opts{group});
            }
        }

        if (exists $$opts{base})
        {
            $dir =~ s/$$opts{base}//;
            $$hash{specimen} = $specimen if ($specimen);
            $$hash{input} = "$dir/$html";
            $$hash{asm} = "$asmdir";
        }
    }
    return $hash;
}
