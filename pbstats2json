#!/usr/bin/env perl
#
#    Copyright (C) 2020 Genome Research Ltd.
#
#    Author: Shane McCarthy <sm15@sanger.ac.uk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use strict;
use warnings;
use Carp;
use JSON;
use XML::Simple;
use Cwd;
use File::Basename;

my $opts = parse_params();
my $output = [];
if ($$opts{stdin})
{
    while (<>)
    {
        chomp;
        push @$output, parse_asmstats($opts, $_);
    }
}
else
{
    foreach my $file (@{$$opts{inputs}})
    {
        push @$output, parse_asmstats($opts, $file);
    }
}
print encode_json($output);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "\nAbout: Extract ToLQC json from PacBio stats files\n",
        "Usage: pbstats2json <asmstats_file>\n",
        "\n";
}

sub parse_params
{
    my $opts = { stdin => 0, upload => 0, group => '', base => "$ENV{PWD}/", regex => '([^\/]+)/preqc/k\d+/(\S+).k\d+.summary.txt', minimal => 0 };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-b' || $arg eq '--base' ) { $$opts{base} = shift(@ARGV); next; }
        elsif ( $arg eq '-p' || $arg eq '--stdin' ) { $$opts{stdin} = 1; next; }
        elsif ( $arg eq '-s' || $arg eq '--group' ) { $$opts{group} = shift(@ARGV); next; }
        elsif ( $arg eq '-u' || $arg eq '--upload' ) { $$opts{upload} = 1; next; }
        elsif ( $arg eq '-m' || $arg eq '--minimal' ) { $$opts{minimal} = 1; next; }
        elsif ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        else { push @{$$opts{inputs}}, $arg; }
    }
    error() unless ($$opts{stdin}==1 || scalar @{$$opts{inputs}});
    return $opts;
}

sub parse_asmstats
{
    my ($opts,$input) = @_;
    $input = Cwd::abs_path($input) unless ($input =~ /^\//);
    my $group = $$opts{group};
    unless ($group)
    {
        ($group) = $input =~ m{([^\/]+/[^\/]+)/[^\/]+/genomic_data};
    }
    my $base = basename($input);
    my $movie = '';
    my $barcode = '';
    my $pipeline = '';
    ($movie,$pipeline,$barcode) = $base =~ m/([^\.]+)\.(ccs|subreads|fl_transcripts)\.([^\.]+)(\.rmdup)?\.stats$/;
    unless ($movie)
    {
        ($movie,$pipeline) = $base =~ m/([^\.]+)\.(ccs|subreads)(\.rmdup)?\.stats$/;
    }
    my ($instrument, $dt);
    if ($movie =~ /_[pX][0123]$/)
    {
        ($dt, $instrument) = $movie =~ m/m(\d{6})_[^_]+_([^_]+)_/;
        $instrument = "m$instrument";
    }
    else
    {
        ($instrument, $dt) = $movie =~ m/(m[^_]+)_(\d{6})_/;
    }
    my @a = ( $dt =~ m/../g );
    $dt = join "-", @a;
    $dt = "20$dt";
    my $tag_index = '';
    if ($barcode) { ($tag_index) = $barcode =~ m/bc(\d+)/; }
    my $movie_info = movie2lims($opts, $movie, $tag_index);

    my $stats = { movie => $movie, barcode => $barcode, date => $dt, instrument => $instrument, a => 0+0, c => 0+0, g => 0+0, t => 0+0, ( %$movie_info ) };
    $$stats{tag_index} = $tag_index if ($tag_index);
    my ($species,undef,$specimen,$source) = $input =~ m{([^\/]+)/(genomic_data|transcriptomic_data)/([^\/]+)/([^\/]+)/stats};
    $species =~ s/_/ /g;
    $$stats{species} = $species if ($species);
    if ($species && !(exists $$stats{species_name} && $$stats{species_name}))
    {
        my @species_split = split " ", $species;
        $$stats{species_name} = join " ", @species_split[0..1];
    }
    $$stats{type} = $source if ($source);
    $$stats{specimen} = $specimen if ($specimen);
    $$stats{group} = $group if ($group);
    if ($instrument)
    {
        $$stats{platform} = 'PacBio';
        $$stats{model}  = 'RSII' if ($instrument =~ /^m16/);
        $$stats{model}  = 'Sequel' if ($instrument =~ /^m5/);
        $$stats{model}  = 'Sequel II' if ($instrument =~ /^m6/);
        $$stats{model} .= 'e' if ($instrument =~ /e$/);
    }
    if (exists $$stats{pipeline_id_lims} && $$stats{pipeline_id_lims} && $$stats{pipeline_id_lims} ne 'NULL')
    {
        $$stats{pipeline} = $$stats{pipeline_id_lims};
    }
    elsif ($pipeline eq 'ccs')
    {
        $$stats{pipeline} = 'PacBio - HiFi';
    }
    elsif ($pipeline eq 'fl_transcripts')
    {
        $$stats{pipeline} = 'PacBio - IsoSeq';
    }
    elsif ($pipeline eq 'subreads')
    {
        $$stats{pipeline} = 'PacBio - CLR';
    }
    else
    {
        $$stats{pipeline} = '-';
    }
    open(my $fh, "<$input") || die("Could not open $input");
    while (<$fh>)
    {
        chomp;
        if (/^A = \d+ \(([\d\.]+)\%\), C = \d+ \(([\d\.]+)\%\), G = \d+ \(([\d\.]+)\%\), T = \d+ \(([\d\.]+)\%\)/)
        {
            $$stats{a} = $1+0;
            $$stats{c} = $2+0;
            $$stats{g} = $3+0;
            $$stats{t} = $4+0;
        }
        elsif (/^sum = (\d+), n = (\d+), (ave|mean) = ([\d\.]+), largest = (\d+), smallest = (\d+)$/ || /^SCAFFOLD\tsum = (\d+), n = (\d+), (ave|mean) = ([\d\.]+), largest = (\d+), smallest = (\d+)$/)
        {
            $$stats{sum} = $1+0;
            $$stats{n} = $2+0;
            $$stats{mean} = $4+0;
            $$stats{largest} = $5+0;
            $$stats{smallest} = $6+0;
        }
        elsif (/^CONTIG\tsum = (\d+), n = (\d+), (ave|mean) = ([\d\.]+), largest = (\d+), smallest = (\d+)$/)
        {
            $$stats{contig_sum} = $1+0;
            $$stats{contig_n} = $2+0;
            $$stats{contig_mean} = $4+0;
            $$stats{contig_largest} = $5+0;
            $$stats{contig_smallest} = $6+0;
        }
        elsif (/^N(\d+) = (\d+), L(\d+) = (\d+)$/ || /^SCAFFOLD\tN(\d+) = (\d+), L(\d+) = (\d+)$/)
        {
            my $nx = "N$1";
            my $lx = "L$1";
            $$stats{$nx} = $2+0;
            $$stats{$lx} = $4+0;
        }
        elsif (/^CONTIG\tN(\d+) = (\d+), L(\d+) = (\d+)$/)
        {
            my $nx = "contig_N$1";
            my $lx = "contig_L$1";
            $$stats{$nx} = $2+0;
            $$stats{$lx} = $4+0;
        }
    }
    close($fh);
    my $coi = $input;
    $coi =~ s/stats$/match.json/;
    $coi =~ s/stats/bold/;
    if (-s $coi)
    {
        my $match = decode_json(`cat $coi`);
        if (exists $$match{match} && $$opts{minimal})
        {
            $$match{match} = [ $$match{match}->[0] ];
        }
        $$stats{match} = $$match{match} if (exists $$match{match});
        $$stats{boldcheck} = $$match{boldcheck} if (exists $$match{boldcheck});
        $$stats{boldstats} = $$match{boldstats} if (exists $$match{boldstats});
    }
    else
    {
        $coi =~ s/json$/xml/;
        if (-s $coi)
        {
            my $match = bold2json($coi, $$stats{species_name});
            if (exists $$match{match} && $$opts{minimal})
            {
                $$match{match} = [ $$match{match}->[0] ];
            }
            $$stats{match} = $$match{match};
        }
    }
    my $dups = 0;
    my $dup_file = $input;
    $dup_file =~ s/stats$/txt/;
    if (-s $dup_file)
    {
        # LIBRARY         READS    UNIQUE MOLECULES    DUPLICATE READS
        # ----------  ----------  ------------------  -----------------
        # TRAC-2-503     2481830     2449542 (98.7%)       32288 (1.3%)
        # ----------  ----------  ------------------  -----------------
        # TOTAL          2481830     2449542 (98.7%)       32288 (1.3%)
        open(my $fh, "<$dup_file") || die("Could not open $dup_file");
        while (<$fh>)
        {
            chomp;
            next unless (/\d+/);
            my (undef,$reads,undef,undef,$dup_reads) = split /\s+/;
            if ($reads && $dup_reads)
            {
                $dups = 100*$dup_reads/$reads;
                last;
            }
        }
        close($fh);
    }
    $$stats{dups} = $dups;

    my $filt = 0;
    my $block = $input;
    $block =~ s/stats$/blocklist/;
    $block =~ s/stats/fasta/;
    if (-s $block)
    {
        $filt = `cat $block | wc -l`;
        chomp $filt;
    }
    $$stats{filtered} = $$stats{n} ? 100*$filt/$$stats{n} : 0;

    if (exists $$opts{base})
    {
        $input =~ s/$$opts{base}//;
        $$stats{input} = $input;
    }
    return $stats;
}

sub movie2lims
{
    my ($opts,$movie,$barcode) = @_;
    my $hash = {};
    my $tolqc = $ENV{TOLQCROOT};
    $barcode = 'NULL' unless ($barcode);

    my ($subreadset_xml) = glob("$tolqc/seq/pacbio/*/*/$movie.*readset.xml");
    if ($subreadset_xml && -s $subreadset_xml)
    {
        my $subreadset = readXML($subreadset_xml);
        my %fields = ( ExtensionTime => 1, MovieLength => 1, InsertSize => 1 );
        foreach my $param (@{$subreadset->{'pbds:DataSetMetadata'}->{'Collections'}->{'CollectionMetadata'}->{'Automation'}->{'AutomationParameters'}->{'AutomationParameter'}})
        {
            if (exists $fields{$$param{'Name'}})
            {
                $$hash{ $$param{'Name'} } = $$param{'SimpleValue'}+0;
            }
        }
        my $runreportdir = dirname($subreadset_xml) . '/reports';
        if (-d qq[$runreportdir])
        {
            my %labels = (
                'interAdapterDist0' => 'Adapter distribution',

                'concordance' => 'Control concordance',
                'readlength' => 'Control polymerase read length',

                'raw_read_length' => 'Loading evaluation',

                'base_yield' => 'Base yield density',
                'hexbin_length' => 'Insert read length density',
                'insertLenDist0' => 'Estimated insert length',
                'readLenDist0' => 'Polymerase read length',
                'subread_lengths' => 'Longest subread length',

                'all_readlength_hist' => 'Read length distribution (all)',
                'ccs_accuracy_hist' => 'Read quality distribution',
                'ccs_npasses_hist' => 'Number of passes',
                'ccs_readlength_hist' => 'HiFi read length distribution',
                'readlength_qv_hist2d.hexbin' => 'Accuracy versus read length density',
            );
            my @imgs = glob(qq[$runreportdir/*.png]);
            foreach my $img (sort @imgs)
            {
                next if ($img =~ /thumb/);
                my $img_path = $img;
                my $base = basename($img);
                $base =~ s/\.png//;
                $base =~ s/_plot//;
                $img_path =~ s{$tolqc/?}{};
                $$hash{"plot-$base"} = [ qq[https://tolqc.cog.sanger.ac.uk/$img_path], "$labels{$base}" ] if (exists $labels{$base});
                if ($$opts{upload})
                {
                    system(qq[s3cmd put --acl-public --quiet $img s3://tolqc/$img_path]);
                }
            }
        }
    }

    # my $baton = -s "$tolqc/track/tol_pacbio_data.json.part" ? "$tolqc/track/tol_pacbio_data.json.part" : "$tolqc/track/tol_pacbio_data.json";
    # return $hash unless (`baton2tsv -c run,well $baton | grep $movie`);
    # open my $fh, "baton2tsv -c run,well $baton | grep $movie | ";

    my $data = -s "$tolqc/track/tol_pacbio_data.fofn.part" ? "$tolqc/track/tol_pacbio_data.fofn.part" : "$tolqc/track/tol_pacbio_data.fofn";
    $data .= " $tolqc/track/tol_pacbio_data.rsii.fofn";
    return $hash unless (`grep $movie $data`);
    open my $fh, "grep $movie $data | cut -f1,6,7 | ";
    my ($rundir,$run,$well);
    while (<$fh>)
    {
        chomp;
        ($rundir,$run,$well) = split /\t/;
        $rundir =~ s/\/[^\/]+$//;
        $run =~ s/RUN(\d)/RUN-$1/;
        $run = "TRACTION-RUN-$run" if ($run =~ /^(\d+)$/ && $run<1000);
        $run =~ s/\s+$//;
        $$hash{rundir} = $rundir;
        $$hash{run} = $run;
        $$hash{well_label} = $well;
        $well =~ s/0//;
    }
    close($fh);
    my %pipeline_map = (
        'PacBio_Ultra_Low_Input' => 'PacBio - HiFi (ULI)',
        'PacBio_Ultra_Low_Input_mplx' => 'PacBio - HiFi (ULI mplx)',
        'Pacbio_HiFi' => 'PacBio - HiFi',
        'Pacbio_HiFi_mplx' => 'PacBio - HiFi (mplx)',
    );
    my $lims = -s "$tolqc/track/tol_pacbio_data.lims.tsv.part" ? "$tolqc/track/tol_pacbio_data.lims.tsv.part" : "$tolqc/track/tol_pacbio_data.lims.tsv";
    open my $fh2, qq[awk -F"\\t" '\$12=="$$hash{run}" && \$13=="$well" && \$9~/$barcode/' $lims | sed 's/NULL//g; s/ orion//g' |];
    while (<$fh2>)
    {
        chomp;
        s/plate_barcode placeholder//;
        my @F = split /\t/;
        $$hash{species_lims} = $F[6];
        $$hash{species_name} = $F[6];
        $$hash{accession_number} = $F[2];
        $$hash{sanger_id} = $F[0];
        $$hash{tag_sequence} = $F[9];
        $$hash{library_load_name} = $F[10];
        $$hash{pipeline_id_lims} = (scalar @F>=16 && exists $pipeline_map{"$F[15]"}) ? $pipeline_map{"$F[15]"} : $F[15];
    }
    close($fh2);
    # unless ($$opts{minimal})
    # {
    #     $$hash{subreadset} = readXML($track, $$hash{rundir}, "$movie.subreadset.xml");
    #     $$hash{sts} = readXML($track, $$hash{rundir}, "$movie.sts.xml");
    # }
    return $hash;
}

sub readXML
{
    my ($xml_file) = @_;
    my $xml = '';
    open(my $fh, "<$xml_file") or die $!;
    while (<$fh>)
    {
        $xml .= $_;
    }
    close($fh);
    return XMLin($xml);
}

sub bold2json
{
    my ($coi,$species) = @_;
    my $bold = XMLin($coi);
    if (exists $$bold{match} && scalar @{$$bold{match}} > 0)
    {
        # use Data::Dumper;
        # print STDERR Dumper($$bold{match});
        if ($species)
        {
            my $top_similarity = $$bold{match}->[0]->{similarity};
            my $top_taxon = $$bold{match}->[0]->{taxonomicidentification};
            unless ($top_taxon eq $species)
            {
                foreach my $match (@{$$bold{match}})
                {
                    if ($species && ($$match{taxonomicidentification} eq $species) && ($top_similarity-$$match{similarity}<0.003))
                    {
                        unshift @{$$bold{sorted}}, $match;
                    }
                    else
                    {
                        push @{$$bold{sorted}}, $match;
                    }
                }
                $$bold{match} = $$bold{sorted};
            }
        }
    }
    else
    {
        my $cov = $coi;
        $cov =~ s/match.xml$/200000.blastn.cov/;
        $cov =~ s/200000$/20000/ unless (-s $cov);
        if (-s $cov)
        {
            open(my $fh, "<$cov") || die("Could not read from '$cov'");
            while(<$fh>)
            {
                my ($read,$idstring,$identity) = split /\t/;
                my ($id,$species,$marker) = split(/\|/,$idstring);
                $species =~ s/_/ /g;
                my $record = {
                    'database' => 'BOLD: Public Records',
                    'ID' => "$id",
                    'sequencedescription' => "$marker",
                    'taxonomicidentification' => "$species",
                    'similarity' => $identity / 100.0,
                    'specimen' => {
                    'collectionlocation' => {
                            'country' => {},
                            'coord' => {
                                'lat' => {},
                                'lon' => {}
                            }
                        },
                        'url' => "http://www.boldsystems.org/index.php/Public_RecordView?processid=$id"
                    },
                    'citation' => 'BOLD Systems, 2020'
                };
                push @{$$bold{match}}, $record;
            }
            close($fh);
        }
    }
    return $bold;
}


# 'match' => [
#          {
#            'database' => 'BOLD: Public Records',
#            'ID' => 'GBMIN33509-13',
#            'sequencedescription' => 'COI-5P',
#            'taxonomicidentification' => 'Vanessa atalanta',
#            'similarity' => '0.9985',
#            'specimen' => {
#                          'collectionlocation' => {
#                                                  'country' => {},
#                                                  'coord' => {
#                                                             'lat' => {},
#                                                             'lon' => {}
#                                                           }
#                                                },
#                          'url' => 'http://www.boldsystems.org/index.php/Public_RecordView?processid=GBMIN33509-13'
#                        },
#            'citation' => 'BOLD Systems, 2020'
#          },
#          ]